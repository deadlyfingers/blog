{
  "version": "https://jsonfeed.org/version/1",
  "title": "Blog for technical designers and developers featuring code stories, experimental tech and tutorials by David Douglas",
  "description": "Blog for technical designers and developers featuring code stories, experimental tech and tutorials by David Douglas",
  "home_page_url": "https://www.deadlyfingers.net",
  "feed_url": "https://www.deadlyfingers.net/search/feed.json",
  "items": [{
      "id": "code-adaptive-web-design-with-react",
      "url": "https://www.deadlyfingers.net/code/adaptive-web-design-with-react",
      "title":"Adaptive web design with React",
      "content_text":"When you need to develop a website that provides a good user experience on desktop and mobile there is only so much you can accomplish using responsive grids. I’ve used a number of grids systems using various frameworks and currently my responsive grid of choice is XY Grid (depending on browser flex box support requirements) which is part of Foundation 6.Unfortunately XY Grid is not made available as a separate npm package so you have to add Foundation Sites but thankfully they make it easy to only import XY Grid using SASS imports.      Add Foundation Sites    yarn add foundation-sites            To import SASS files with Create React App, you need to install node-sass    yarn add node-sass --dev            Then rename the ‘App.css’ file generated by Create React App to ‘App.scss’ and add the following lines:    /* Import Foundation XY Grid */@import \"node_modules/foundation-sites/scss/foundation.scss\";@include foundation-xy-grid-classes(  $base-grid: true,  $margin-grid: true,  $padding-grid: true,  $block-grid: true,  $collapse: true,  $offset: true,  $vertical-grid: true,  $frame-grid: true);@include foundation-visibility-classes;@include foundation-flex-classes;            Finally, remember to update any css imports in the ‘App.js’ file from ‘.css’ to ‘.scss’    import \"./App.scss\";      After this it’s just a case of adding the XY Grid class names to your JSX markup.  As mentioned earlier there are conditions where a grid class on its own won’t solve every responsive design problem specifically in cases when you need to resize a React child component that requires an exact width or height prop in order to render correctly. In this case you may need to wrap that component with a React Resize Detector to render to component on resize event.yarn add react-resize-detectorWhen it comes to selecting a UI kit for React apps Material UI provides a good number of components, which can be themed.yarn add @material-ui/coreMaterial UI Select components and custom date pickers can provide a great experience on desktop using a mouse, but I find they can run into a number of UX issues on mobile. I think this could be one of the reasons the Material UI Picker docs mention there are falling back to native input controls. But whilst the experience of native pickers is optimal on mobile, it’s not widely available on desktop yet. Also, web designers have little control over how it looks on desktop at the minute, so if you site uses a dark theme it may look a bit out of place or like lazy design.In the ideal world we would have native pickers that support basic theming using CSS for desktop browsers but until that happens I think the best way to go is to use the Material UI Select and a custom Date Picker on desktop, whilst taking advantage of the native selects and pickers on mobile. Fortunately there’s a React device detect component to help with that!yarn add react-device-detectUsing device detection we are able to provide Adaptive React components that use the native select and native date picker components for mobile and the Material UI Select and the React Date Picker component for desktop in order to provide the best user experience for a particular platform.Adaptive Select component for desktop and mobileAdaptive Date Picker component for desktop and mobile",
      "summary":"Responsive and Adaptive Design techniques for React using Material UI components for desktop and native select for mobile devices.",
      "date_published": "2019-01-08T00:00:00+00:00",
      "tags":["React","Responsive Design","Adaptive Design","Web Development","RWD"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2019}
    },{
      "id": "code-migrating-from-wordpress-to-github-pages",
      "url": "https://www.deadlyfingers.net/code/migrating-from-wordpress-to-github-pages",
      "title":"Migrating from Wordpress blog to GitHub Pages",
      "content_text":"Wordpress has done a decent job of running my blog.But I’ve longed for something leaner for writing developer code stories as the rich HTML text editor tends to introduce too much complexity.Initially I thought about writing a custom blog web app but decided it would be better to consider existing platforms that can handle my requirements.Ultimately I decided to migrate my Wordpress blog to GitHub Pages.Here’s a bunch of things I like with GitHub Pages compared with my self-hosted Wordpress site:  Rather than edit posts in small scroll view I can use a desktop code editor like VS Code which supports full screen editing of text and live code preview. (I’m aware this might not be everyone’s cup of tea but writing developer blog posts inside a developer tool feels right at home for me!)  Markdown is much easier for writing developer documentation and inline code snippets, but I can also inject HTML when needed.  Use GitHub as server - I don’t need to provide my own hosting or database. Free hosting is nice!  GitHub has partnered with Let’s Encrypt so you get HTTPS for free - just check a box!      You can setup a custom domain for both an apex domain and www subdomain and GitHub Pages will handle the redirect.                  Add A Records with your DNS provider for apex domain (without www.):                                            Domain              IP address                                                          YOUR_DOMAIN.com.              185.199.108.153                                      YOUR_DOMAIN.com.              185.199.109.153                                      YOUR_DOMAIN.com.              185.199.110.153                                      YOUR_DOMAIN.com.              185.199.111.153                                                  Add one CNAME record for www subdomain.                                            Domain              Canonical name                                                          www              USERNAME.github.io.                                          Update the GitHub Pages &gt; Settings &gt; Custom Domain field to www.YOURDOMAIN.com (this will add a CNAME file to the root directory in the GitHub Pages branch)      You can then enable Enforce HTTPS in GitHub Pages &gt; Settings.      However there are some downsides during this process:  Not as easy to setup as Wordpress.  Don’t expect the migration of Wordpress HTML to MD files to be perfect! In my case the conversion tool had problems preserving spacing in code blocks and some character conversions may need fixed.  By default all updates will be public on github so you have to think about that if you need to support private posts.How to migrate from Wordpress to GitHub Pages (Jekyll)  GitHub Pages is powered by Jekyll. To import your Wordpress XML archive and run Jekyll locally you will need to install Ruby 2.1 or better.      If you are migrating an existing blog you have to export your content from the Wordpress admin control panel.          The general form of the URL is as follows: https://YOUR-USER-NAME.wordpress.com/wp-admin/export.php            Import the Wordpress XML archive file as mentioned on the import wordpress to Jekyll docs          Install Ruby Gems        gem install jekyll-importgem install hpricotgem install open_uri_redirections              Convert Wordpress XML archive to HTML files and download images to ‘assets’ directory.        ruby -rubygems -e 'require \"jekyll-import\";JekyllImport::Importers::WordpressDotCom.run({  \"source\" =&gt; \"C:/Users/USERNAME/Downloads/REPLACE_USING_YOUR_FILE_NAME.wordpress.YYYY-MM-DD.xml\",  \"no_fetch_images\" =&gt; false,  \"assets_folder\" =&gt; \"assets/images\"})'            Convert HTML files to Markdown files. You can try any number of tools to see what works best for you. I tried various ones including the reverse_markdown Ruby gem and the html2text Python script. To help batch process the files I created a Wordpress HTML to MD gist to find any *.html files in the ‘_posts’ directory and convert them all to *.md files using reverse_markdown gem.          ‘wordpress-html-to-md.rb’ gist usage:        gem install reverse_markdown        ruby ./wordpress-html-to-md.rb \"_posts\"                  html2text usage:        ./html2text.py C:/Users/USERNAME/git/blog/_posts/YYYY-MM-DD-filename.html              NB. Don’t use “\\” in path otherwise you will get file not found error, use “/” in path instead.            To show code syntax highlights you will need to add some styles for Rouge (GitHub Page’s syntax highlighter). You can use Rougify to copy GitHub’s code syntax highlighting to a stylesheet.    gem install rouge        rougify style github &gt; _sass/styles/_rouge.scss      After this you might decide to apply one of the built-in GitHub Pages themes or use a remote theme or create your own theme. In my case I added the Foundation XY-Grid module for responsive design grid layouts. One thing I would like to see supported in GitHub Pages is support for npm packages. Everyone seems to have their own way for building this out and it would be nice just to provide a package.json file and let GitHub take take of the rest. One nice solution however might be to roll out the node_modules dependencies as part of a remote theme. But at this early stage I prefer to keep it all together in one repo until I have proved everything just works over time.ResourcesYou can find the source code of this website on my GitHub Page’s blog repo. I’ve also included a list of references below which I found useful during the creation of this new GitHub Pages blog.GitHub Pages settings  GitHub Pages  GitHub Project Pages  Using Jekyll  Built-in Themes  Default Plugins  markdown: kramdown  highlighter: rougeJekyll blog  Import posts from Wordpress blog  Jekyll structure  Jekyll cheatsheet  Jekyll md cheatsheet  Posts  Assets  Sass/SCSS  Generate GitHub Rouge SASS  Linking to pages  Liquid template languageYML Config reference docs  YML Syntax  Jekyll Configuration  GitHub Pages setup  GitHub Pages dependencies  List of TimeZones  Jekyll CollectionsDisqusDisqus can be added to a Jekyll site to enable comments on blog posts.  Adding Disqus to Jekyll blog  Disqus configFoundationI added the XY-Grid SASS classes for responsive design layouts.  XY-GridSearchA Jekyll generated JSON feed can be used as the search index for lunr.js.  Jekyll and lunr search  Submit search query  JSON feed format  Jekyll JSON feedGulpOne gulp command deploys the production build to my gh-pages branch!  Publish build to GitHub Pages  gulp 3 to gulp 4 task guide",
      "summary":"How to export your Wordpress blog and setup GitHub Pages with https and custom domain.",
      "date_published": "2018-10-16T00:00:00+01:00",
      "tags":["GitHub Pages","Jekyll","Ruby","Wordpress","Blog","Markdown","Website"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2018}
    },{
      "id": "code-custom-vuforia-vumarks-to-identify-iot-devices-with-hololens",
      "url": "https://www.deadlyfingers.net/code/custom-vuforia-vumarks-to-identify-iot-devices-with-hololens",
      "title":"Custom Vuforia VuMarks to identify and monitor IoT Devices with HoloLens",
      "content_text":"Some of the most popular experiences of Augmented or Mixed Reality are currently in a gaming or an immersive 3D form. But what makes headsets like the HoloLens so different and special is the ability to still see into the physical world. It is this link that opens up so many new opportunities and future possibilities of spatial computing. An interesting scenario is using HoloLens to interact with IoT devices in the real world. Just by gazing at devices around a room imagine you could identify a specific IoT device to review its real-time telemetry and control it over the air!Setting up some sample IoT devices to interact with…To test out this scenario the first thing we need here is access to some IoT devices to identify. In our case and for sake of simplicity we use some simulated IoT devices using the Azure IoT Solution Accelerators Remote Monitoring sample which you can try out.Once the Azure IoT Remote Monitoring solution is provisioned and ready you can select it to review a list of devices. This provides us with the list of Device Name Ids we will use to generate the VuForia VuMarks in the next steps.Identifying IoT devices in the real-world using VuForia VuMarksThe second thing we need is to be able to identify each IoT device in HoloLens. One approach we tried during a HoloLens hack was to use Vuforia VuMarks to identify each device. A VuMark template contains a particular type of encoded data; numeric, string or raw bytes. Initially I tried out the default numeric type VuMarks from the VuForia Samples to check everything was working before trying anything more complex. Bear in mind there will also be a number of physical and environmental factors including VuMark placement, size and lighting conditions in the area to test and consider.Tip: I found it useful to test the VuMarks by saving all the generated images on my iPhone and testing them in the Unity Editor using the built-in web cam.Creating a custom VuMarkI used the VuForia VuMark Illustrator template to create a custom VuMark. In my case I wanted to a support a 32 character length string to contain a GUID so I created a string type VuMark with 280 data elements. To save time designing your own VuMark you can download my finished custom GUID VuMark SVG. If you want to create your own VuMark I’ve included a list of VuMark element requirements below so you can get an idea of how complex the design would need to be and compare how many elements are required for each data type:            Id length      String elements required      Byte elements required                  1      35      40              4      56      64              8      84      96              10      98      112              11      112      120              12      119      128              14      133      144              16      147      160              18      161      176              20      182      208              22      196      224              24      210      240              32      280      320              48      406      464              64      546      624              100      840      928                  Maximum numeric Id      Numeric elements required                  9      28              99      31              999      34              9999      38              9 x5      41              9 x6      50              9 x7      54              9 x8      57              9 x9      60              9 x10      64              9 x11      67              9 x12      70              9 x13      74              9 x14      77              9 x15      80              9 x16      84              9 x17      87              9 x18      90              9 x19      94      For more info on designing VuMarks you can download the VuMark design guide or view design guide docs. I also found the video explaining the VuMark design process to be most helpful. NB: To design your own custom VuMarks you will need Adobe Illustrator to run the VuMark template scripts.Illustrator / VuMark Scripts troubleshooting notes:  You may have to restart Illustrator after copying the scripts into the C:\\Program Files\\Adobe\\Adobe Illustrator CC 2018\\Presets\\en_US\\Scripts directory.  If you hit an error when setting up a new VuMark using the Illustrator scripts v6.0.112 then check you have Adobe’s Myriad Pro fonts installed.  If you can’t see the Illustrator canvas or the document area is blank or black then you might have to disable GPU acceleration under Preferences &gt; Performance.Creating custom VuMark database for UnityOnce you’ve designed your custom VuMark in Illustrator and it passes all the tests you will be ready to export your VuMark Template artwork. If you don’t have your own design ready you can download my GUID VuMark SVG artwork.Note: If you’re starting a new design it’s preferable to avoid rotational symmetry in your VuMark’s border or contour otherwise you will have some additional work to do, as well as this the validation scripts don’t seem to provide a clear indication if this is completed correctly. You might also notice the Border and Clear Space width is only shown as “VERIFY” status - this check is left to the designer to manually check that the magenta overlay around the VuMark contour falls within the border and clear space boundary.  If you haven’t used VuForia before you will have to create a developer account and get a free license key for development in Unity.  Create a new VuMarks database.  Upload the custom VuMark SVG artwork file into your VuMark database. Note: You should set the width of the VuMark in relation to Unity’s unit of measurement which is in meters. In my case I want to recognize the VuMark on my iPhone which is 6 cm wide therefore I use a value of “ 0.06” m.  Select your VuMark template target to download as your VuMark database.  Download database for Unity Editor.  Import your VuMarks database package into Unity project. If you don’t have your own Unity project you can setup the Mixed Reality IoT Monitoring sample to get started.  In Unity scene check the VuMark Behavior is setup correctly with your custom VuMark Database and Template and has Extended Tracking enabled for Mixed Reality.  Open the VuForia AR Camera configuration settings to enter your VuForia developer license key and to load and activate the VuMark database.  Generate the VuMark images for each Device Id you want to recognize.For my sample IoT devices I generated the following device Ids; “chiller-01.0”, “chiller-02.0”, “elevator-01.0”, “elevator-02.0”, “furnace-01.0”.                                        Tip: Save the generated VuMark images to iPhone / Android to test with. (I just saved the generated VuMark PNG images to my OneDrive images folder to sync onto my iPhone.)Running the sample Mixed Reality IoT Monitoring Unity projectTo run the Mixed Reality IoT Monitoring Unity project you will also need to setup the Azure Function APIs to get the device data from the Azure IoT Remote Monitoring sample.Azure IoT Device Functions (Nodejs backend)  Fork the Azure IoT Device Functions project on github.  Sign in to your Azure portal  Create a new Azure Function. NB: Ensure your Function app settings is using version 2      Add the following environment variables using your Azure Function app settings :          IOTHUB_CONNECTION_STRING      TSI_FQDN      AD_APP_ID      AD_APP_KEY      AD_TENANT_DOMAIN NAME “*.onmicrosoft.com”        To deploy your Function app select Platform Features &gt; Deployment Options &gt; Setup &gt; GitHub and choose your forked repo.Next steps…Using VuForia VuMarks we are able to identify an IoT device using a HoloLens. Then using the recognized device Id as a param we can poll an Azure Functions endpoint to return the device’s telemetry. The next steps in this scenario would be to add buttons to call methods listed in the device’s payload.",
      "summary":"How to use a VuMark to encode a 32 character GUID string to identify a IoT Device Id with HoloLens using Azure Functions and IoT Hub.",
      "date_published": "2018-09-24T15:47:27+01:00",
      "tags":["IoT","HoloLens","Mixed Reality","VuForia","VuMark","Data Visualisation"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2018}
    },{
      "id": "code-analytics-for-mixed-reality",
      "url": "https://www.deadlyfingers.net/code/analytics-for-mixed-reality",
      "title":"Analytics for Mixed Reality",
      "content_text":"Behind every good user experience is great analyticsIf you ever designed or developed client side applications or websites you’ve probably integrated with an analytics service to provide telemetry data to help make informed design choices and development decisions to improve user experience and business outcomes.One of the key performance indicators is when you track steps or funnel operations as conversions to calculate a conversion rate for each session. You would want to know how the conversion rate can be improved upon and a good idea would be to watch out for the steps with a high bounce rate where users are dropping off. If the bounce rate is very high then there might even be a blocker or flaw in regards to the user. Either way we can understand the benefit for the collection and study of analytics which is essential for providing the insights that will help designers and developers craft better user experiences and advance product development.Application Insights for UnityIf you’re a Unity developer or you develop in VR, AR, MR or XR you might have stuck the issue of gathering analytics onto the backlog but it should be one of the first items done so you can use it to help plan and prioritize the other features. To help you get started I’ve made an Application Insights for Unity sample so you can start logging telemetry in just a few minutes! All you have to do to add this to your existing Unity app or game is drop the Unity Application Insights script onto a Game Object, add your Application Insights Instrumentation key and you will be all set to record valuable user session telemetry automatically. After that all you have to do it wait around 5 mins for the telemetry to display in the Application Insights Usage section in Azure. You can also extend this in you own app or game to record any custom events or metrics you want to know about. But right out of the box (without any additional effort on your part) you will be able to visualize telemetry for users, sessions and user flow and their journey across the scenes of your Unity app or game. Here are just some of the visualizations already built-in to Application Insights in the Azure portal:User FlowsChart user flow across Unity scene changes and split by custom or interaction events.SessionsView users and events during sessions.FunnelsCreate funnels by creating step by step conditions to get conversion rates.RetentionReview returning users over a period of time.Analytics for Mixed Reality interactionsIn the Unity project there is also a MR sample to show how to setup Application Insights for recording custom interaction events and metrics in a scene. To use the sample please fork or clone the Unity Application Insights sample project, import the plugins and setup Application Insights in Azure portal if you haven’t already. Once you’ve got that you can get up and running on HoloLens straight from the Unity Editor:  To view the Mixed Reality sample in HoloLens open the scene named “Scene-MR”. (Make sure you’ve pasted in your Instrumentation key into the Application Insights game object script)  Connect to remote HoloLens device using Window &gt; XR &gt; Holographic Emulation window. Note: Requires the Holographic Remoting Player installed and open on HoloLens to get the Remote Machine IP address.  Hit Play and you will start recording interaction telemetry with the holograms.The Application Insights MR scripts will record taps, gaze time and object proximity - when users physically “visit” a hologram by moving closer to it.You can also create your own custom dashboard templates using Ibex Dashboard (which is another project I helped with) and is designed for visualizing data from Application Insights using Kusto queries.You can add the dashboard template for MR shown above to visualize the telemetry for MR custom events and metrics. Check out the readme on github for more info about installing custom Ibex Dashboard templates.",
      "summary":"Unity project showing how to log telemetry using Application Insights. Capture events for Unity UI buttons and spatial events including air tap and proximity interactions for HoloLens and Mixed Reality. With Application Insights you can follow user flow across scenes, create funnels and review user retention for your Unity project.",
      "date_published": "2018-09-17T16:36:26+01:00",
      "tags":["Application Insights","Ibex Dashboard","Data Visualisation","Kusto","Azure","Unity3d","Mixed Reality","HoloLens"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2018}
    },{
      "id": "code-unity-web-sockets-mixed-reality-uwp",
      "url": "https://www.deadlyfingers.net/code/unity-web-sockets-mixed-reality-uwp",
      "title":"Unity Web Sockets for Mixed Reality",
      "content_text":"Certain cloud services may offer a Web Socket streaming connection as an alternative to firing repeated REST requests or polling. To make working with REST APIs in Unity more convenient I built a REST client for Unity based on UnityWebRequest which supports abstract types for JSON / XML serialisation. But given a real-time scenario like “speech to text” using a Web Socket client instead of REST gives an option to stream the audio data and get intermediate results back which provides responsive feedback to users for an improved user experience.Using Bing Speech API as an example we can see some limitations of using REST API versus the Web Socket protocol:            Bing Speech      REST      Web Socket                  Audio stream duration      15 secs      180 secs - 10 mins              Stream audio with intermediate results      No      Yes      Also when it comes to client app development in Unity there are a couple of very useful message events you receive from the WebSockets server:  End-of-speech detection so you stop recording on client device.  Phrase detection so you can pass phrases to natural language understanding services (LUIS) model.To use Web Sockets in Unity you can use the WebSocket-Sharp library, but this only supports the Unity Editor and the mono target platforms. In order to use Web Sockets when targeting Windows Mixed Reality headsets you have to use Universal Windows Platform (UWP) APIs like MessageWebSocket. To make things easier I have created a common Unity Web Socket interface to use WebSocket-Sharp inside the Editor and mono platforms and then use MessageWebSocket when targeting the Windows Store App platform for MR headsets.Unity Web Socket interface            API      Description                  ConfigureWebSocket(url)      Configures web socket with url and optional headers              ConnectAsync()      Connect to web socket              CloseAsync()      Close web socket connection              SendAsync(data)      Send binary byte[] or UTF-8 text string with optional callback              IsOpen()      Check if web socket status is open              Url()      Return the URL being used by the web socket      Interface eventsOnError(object sender, WebSocketErrorEventArgs e);OnOpen(object sender, EventArgs e);OnMessage(object sender, WebSocketMessageEventArgs e);OnClose(object sender, WebSocketCloseEventArgs e);If you are interested in the example above there I have also prepared a Unity Web Socket demo project to show Bing Speech service to LUIS for controlling scene game objects using natural speech commands for Mixed Reality scenarios.",
      "summary":"Unity project showing how to stream voice recordings in real-time to Bing Speech and LUIS model for natural language understanding to control properties of 3D objects in HoloLens or Virtual Reality.",
      "date_published": "2018-09-16T13:17:16+01:00",
      "tags":["Unity3d","UWP","Web Sockets","Mixed Reality","HoloLens"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2018}
    },{
      "id": "code-querying-application-insights-for-data-visualisation",
      "url": "https://www.deadlyfingers.net/code/querying-application-insights-for-data-visualisation",
      "title":"Querying Application Insights for data visualisation",
      "content_text":"Ibex dashboard is an open source web app for displaying telemetry data from Application Insights. It comes with a number of sample templates including analytics dashboards for Bots. If you’re developing a bot and you want to see how your bot is performing over time then you can select the Bot Instrumentation template which requires you to enter your Application Insights App Id and App Key. Also depending on your bot you will need to add Node.js instrumentation or C# instrumentation in order to enable logging to Application Insights. Then after a couple of minutes you will start to see the data come through! The dashboard can be completely customised using generic components including charts, tables, score cards and drill-down dialogs. These elements can be used to review how your bot performs over time, monitor usage stats, message sentiment, user retention and inspect user intents.If you are new to Application Insights one of the useful features of the Ibex dashboard is the ability to inspect an element’s Application Insights query and the formatted JSON data side by side.This query can be copied and played back inside your Application Insights live code editor. This is a good way to learn how the Application Insights queries work as you can step through the query by commenting out various lines with double slashes ‘//’.Writing Azure Log Analytics queries for Ibex dashboardThe Ibex dashboard schema is composed of meta data, data sources, filters, elements and dialogs. Each data source allows you to define a query and a ‘calculated’ javascript function to process the query’s results for display purposes. Before learning to write Application Insights queries I was used to writing javascript map / reduce functions to aggregate data and so it’s all too easy to rely on previous javascript knowledge to process the data from a basic query. But often this javascript ‘reduce’ aggregation logic can done in an Application Insights query with a lot less effort. So invest some time up front to learn the key Application Insights query concepts and it will pay off in the long run!To help to illustrate this we can look at the Application Insights query for tracking a bot to human hand-off during a user’s conversation session. For this scenario we built a QnA bot with the hand-off module installed. If a customer asks the QnA bot a question and no answer was found in the knowledge base we trigger an automatic hand-off to human. We want to show the fastest, longest and average times for customer waiting for an human agent to respond in the dashboard.We can start by writing a basic query in Application Insights to get all the transcripts from the ‘customEvents’ table and ‘project’ only the information we need.customEventswhere name == 'Transcript'| extend customerName=tostring(customDimensions.customerName),  text=tostring(customDimensions.text),  userTime=tostring(customDimensions.timestamp),  state=toint(customDimensions.state),  agentName=tostring(customDimensions.agentName),  from=tostring(customDimensions.from)| project from, text, customerName, agentName, state, userTime| order by userTime ascBut in this example we are not using Application Insights to aggregate the results so we end up with a lot of results to process. Given the query above the following code snippet is the amount of Javascript required.calculated: transcripts =&gt; {  const key = \"customerId\";  const transcriptsGrouped = transcripts.reduce((a, c) =&gt; {    const i = a.findIndex(col =&gt; col.id === c[key]);    if (i === -1) {      let collection = {        id: c[key],        transcripts: []      };      a.push(collection); // new group    } else {      a[i].transcripts.push(c); // append to group    }    return a;  }, []);  const SEC_PER_DAY = 86400; // 60 * 60 * 24;  let times = [];  transcriptsGrouped.forEach(userTranscript =&gt; {    let prevTranscript = null;    userTranscript.transcripts.forEach(transcript =&gt; {      if (        prevTranscript &amp;&amp;        prevTranscript.state === 1 &amp;&amp;        transcript.state === 2      ) {        let date1 = new Date(prevTranscript.userTime);        let date2 = new Date(transcript.userTime);        let diff = (date2 - date1) / SEC_PER_DAY;        times.push(diff);      }      prevTranscript = transcript;    });  });  const avgTimeWaiting =    times.reduce((a, c) =&gt; {      return a + c;    }, 0) / times.length;  const maxTimeWaiting = Math.max(...times);  const minTimeWaiting = Math.min(...times);  return {    \"transcriptsAverageTimeWaiting-value\": avgTimeWaiting.toFixed(2),    \"transcriptsLongestTimeWaiting-value\": maxTimeWaiting.toFixed(2),    \"transcriptsShortestTimeWaiting-value\": minTimeWaiting.toFixed(2)  };};The first ‘reduce’ block is required to group the transcripts per user Id. Then for every user we track the state change from waiting and talking to human agent and calculate the time difference in seconds. Where ‘state’ is an integer value that marks the current status of the conversion.0 = Bot 1 = Waiting 2 = Human agentBut we can optimise the code by doing the aggregation within the Application Insights query by using the ‘summarize’ operator and ‘count’ function.customEventswhere name == 'Transcript'| extend conversationId=tostring(customDimensions.userConversationId),  customerId=tostring(customDimensions.customerId),  state=toint(customDimensions.state)| where state==1 or state==2| order by timestamp asc| summarize total=count(), times=makelist(timestamp) by conversationId, customerId, bin(state, 1)| project conversationId, customerId, state, startTime=times[0]| summarize result=count(state), startEndTimes=makelist(startTime) by conversationId, customerId| where result == 2| project conversationId, customerId, timeTaken=todatetime(startEndTimes[1])-todatetime(startEndTimes[0])Notice how you can apply aggregations in multiple passes, in this case the ‘summarize’ operator and ‘count’ function is used to aggregate results twice in conjunction with multiple ‘where’ statements that are used to filter the results. Now the javascript ‘calculated’ function code can be greatly simplified:calculated: results =&gt; {  const times = results.reduce((acc, cur) =&gt; {    // converts time hh:mm:ss format to value in seconds    acc.push(      cur.timeTaken        .split(\":\")        .reverse()        .reduce((a, c, i) =&gt; a + c * Math.pow(60, i), 0)    );    return acc;  }, []);  const avgTimeWaiting = times.reduce((a, c) =&gt; a + c, 0) / times.length;  const maxTimeWaiting = Math.max(...times);  const minTimeWaiting = Math.min(...times);  return {    \"transcriptsAverageTimeWaiting-value\": avgTimeWaiting.toFixed(2),    \"transcriptsLongestTimeWaiting-value\": maxTimeWaiting.toFixed(2),    \"transcriptsShortestTimeWaiting-value\": minTimeWaiting.toFixed(2)  };};The only thing we do is a ‘reduce’ function to convert the time format ‘hh:mm:ss’ returned from the Application Insights query into a number of seconds for the various calculations for displaying in a score card element.The final Application Insights query is available in the hand-off to human dashboard template and is included with Ibex dashboard.Further reading and resources:  Azure Application Insights  Azure Log Analytics query language  Azure Log Analytics query language reference docs  Azure Log Analytics playground  Ibex dashboard for Application Insights",
      "summary":"Ibex dashboard is an open source web app for displaying telemetry data from Application Insights. It comes with a number of sample templates including analytics dashboards for Bots. If you’re developing a bot and you want to see how your bot is performing over time then you can select the...",
      "date_published": "2017-08-30T14:48:00+01:00",
      "tags":["Application Insights","Ibex Dashboard","Data Visualisation","Kusto","Log Analytics","Bots"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2017}
    },{
      "id": "tutorial-unity3d-and-azure-blob-storage",
      "url": "https://www.deadlyfingers.net/tutorial/unity3d-and-azure-blob-storage",
      "title":"Unity3d and Azure Blob Storage",
      "content_text":"Previously I’ve looked at using Azure App Services for Unity, which provided a backend for Unity applications or games using Easy Tables and Easy APIs. But what if I wanted to lift and shift heavier data such as audio files, image files, or Unity Asset Bundles binaries? For storing these types of files, I would be better using Azure Blob storage. Recently I created an Azure Blob storage demo project in Unity to show how to save and load these various asset types in Unity. One of the exciting new applications for Unity is developing VR, AR or MR experiences for HoloLens where a backend could serve media content dynamically whether it’s images, audio, or prefabs with models, materials and referenced scripts. When thinking of cloud gaming the tendency is to consider it in terms of end user scenarios like massive multiplayer online games. While Azure is designed to scale, it is also helpful to use during early stage development and testing. There is an opportunity to create productive cloud tools for artists, designers and developers especially when extensive hardware testing is required in Virtual Reality, Augmented Reality or Mixed Reality development. For example, imagine being able to see and test updates on the hardware without having to rebuild the binaries in Unity or Visual Studio each time. There are many more use cases than IΓÇÖve mentioned here like offering user generated downloadable content for extending your game or app.I’ll be covering the load and save code snippets from the Unity and Azure Blob storage demo commentary which you can watch to see how you can save and load image textures, audio clips as .wav files, and Asset Bundles. The Unity Asset Bundle demo will also include loading Prefabs and dynamically adding them into a Unity Scene using XML or JSON data which should give you some ideas of how you might like to use Blob storage in your Unity development or end user scenario.Setup Azure Blob StorageSetting up Blob Storage for the Unity demo can be done quickly in just a couple of steps:      Sign in to your Azure portal and create a new Storage Account.        Once the Storage account is provisioned then select the add new container button which will be used for storing the blobs.            Create the ‘Blob' type container which permits public read access for the purposes of this demo.      Audio filesSaving Unity Audio Clips into Blob StorageFor the Unity audio blob demo I created a helper script to convert Unity Audio Clip recording to .wav files for the purpose of saving to Azure Blob Storage.Once the audio has been recorded in Unity I can upload the file using the PutAudioAudio method which takes a callback function, the wav bytes, the container resource path, the filename and the file’s mime type. By the way this method must be wrapped using StartCoroutine which is the way Unity 5 handles asynchronous requests. Once the request is completed it will trigger the PutAudioCompleted callback function I have provided my script with a response object. If the response is successful you will see the wav file blob added in your Blob Container.☞ Tip: Grab the Storage Explorer app for viewing all the blobs!private void PutAudio (){\tbyte[] wavBytes = File.ReadAllBytes (localPath);\tstring filename = Path.GetFileName (localPath);\tDebug.Log (\"Put audio file: \" + filename);\tStartCoroutine (blobService.PutAudioBlob (PutAudioCompleted, wavBytes, container, filename, \"audio/wav\"));}public void PutAudioCompleted (RestResponse response){\tif (response.IsError) {\t\tDebug.LogError( \"Put audio file error: \" + response.ErrorMessage );\t\treturn;\t}\tDebug.Log (\"Put audio blob success: \" + response.Url);}Loading .wav files from Blob StorageAs we used the Blob type container with public read access you can use the UnityWebRequest.GetAudioClip method to directly load the .wav file from Azure Blob Storage and handle it as a native Unity AudioClip type for playback.public void TappedLoad (){\tstring filename = Path.GetFileName (localPath);\tstring url = Path.Combine (client.PrimaryEndpoint () + container, filename);\tDebug.Log (\"Load audio blob: \" + url);\tStartCoroutine (LoadAudioURL (url));}private IEnumerator LoadAudioURL (string url){\tUnityWebRequest www = UnityWebRequest.GetAudioClip (url, AudioType.WAV);\tyield return www.Send ();\tif (www.isError) {\t\tDebug.LogError( \"Load audio url error: \" + www.error );\t} else {\t\tAudioClip audioClip = ((DownloadHandlerAudioClip)www.downloadHandler).audioClip;\t\taudioSource.clip = audioClip;\t\taudioSource.Play ();\t}}Image filesFor the Unity image blob demo I used Unity’s Application.CaptureScreenshot method to generate a png image representation of the current state of the game screen.Saving Images into Blob StorageThe image is saved using the PutImageBlob method which is similar to the audio blob except we pass the image bytes and mime type.private void PutImage (byte[] imageBytes){\tstring filename = Path.GetFileName (localPath);\tStartCoroutine (blobService.PutImageBlob (PutImageCompleted, imageBytes, container, filename, \"image/png\"));}private void PutImageCompleted (RestResponse response){\tif (response.IsError) {\t\tDebug.LogError( \"Put image file error: \" + response.ErrorMessage );\t\treturn;\t}\tDebug.Log (\"Put image blob:\" + response.Url);}Loading Image Textures from Blob StorageAs we used the Blob type container with public read access you can use the UnityWebRequest.GetTexture method to directly load the .png file from Azure Blob Storage and handle it as a native Unity Texture type for use. As I want to use the Texture in Unity UI to display as an Image I need to convert it to a sprite using my ChangeImage function.public void TappedLoad (){\tChangeImage (new Texture2D (1, 1));\tstring filename = Path.GetFileName (localPath);\tstring url = Path.Combine (client.PrimaryEndpoint () + container, filename);\tDebug.Log (\"Load image: \" + url);\tStartCoroutine (LoadImageURL (url));}public IEnumerator LoadImageURL (string url){\tUnityWebRequest www = UnityWebRequest.GetTexture (url);\tyield return www.Send ();\tif (www.isError) {\t\tDebug.LogError( \"Load image url error: \" + www.error );\t} else {\t\tTexture texture = ((DownloadHandlerTexture)www.downloadHandler).texture;\t\tChangeImage (texture);\t}}private void ChangeImage (Texture2D texture){\tSprite sprite = Sprite.Create (texture, new Rect (0, 0, texture.width, texture.height), Vector2.zero);\timage.GetComponent&lt;Image&gt; ().sprite = sprite;}private void ChangeImage (Texture texture){\tChangeImage (texture as Texture2D);}Unity Asset BundlesUnity Asset Bundles provide a way to dynamically load in assets in your project. This Asset Bundle demo for Blob Storage is a little more complicated than the other examples. An important note to remember is that Asset Bundle binaries need to be build for each target platform. Refer to Unity documentation on building Asset Bundles for more info on building Asset Bundles. Also make sure to review the code stripping section if you want to be able to use referenced scripts in your Prefabs when you do a build.Building and uploading the Asset Bundles for each platform to Blob StorageI have included the Editor scripts with the demo to build the Asset Bundle for each platform. NB: Windows 10 Store App (or HoloLens) bundles can only be built on the Windows Unity Editor at time of writing this. Building the Asset Bundles and uploading them is performed inside Unity Editor:  Select Assets &gt; Build Asset Bundles  Select Window &gt; Upload Asset Bundles…Loading Asset Bundles from Blob Storagepublic void TappedLoadAssetBundle (){\tstring filename = assetBundleName + \"-\" + GetAssetBundlePlatformName () + \".unity3d\";\tstring url = Path.Combine (client.SecondaryEndpoint () + container, filename);\tDebug.Log (\"Load asset bundle: \" + url);\tStartCoroutine (LoadAssetBundleURL (url));}public IEnumerator LoadAssetBundleURL (string url){\tUnityWebRequest www = UnityWebRequest.GetAssetBundle (url);\tyield return www.Send ();\tif (www.isError) {\t\tDebug.LogError( \"Load Asset Bundle url error: \" + www.error );\t\tyield break;\t} else {\t\tassetBundle = ((DownloadHandlerAssetBundle)www.downloadHandler).assetBundle;\t\tDebug.Log(\"Load url: \" + url);\t\tStartCoroutine (LoadAssets (assetBundle, \"CloudCube\"));\t}}private string GetAssetBundlePlatformName (){\tswitch (Application.platform) {\tcase RuntimePlatform.WindowsEditor:\tcase RuntimePlatform.WindowsPlayer:\t\treturn SystemInfo.operatingSystem.Contains (\"64 bit\") ? \"x64\" : \"x86\";\tcase RuntimePlatform.WSAPlayerX86:\tcase RuntimePlatform.WSAPlayerX64:\tcase RuntimePlatform.WSAPlayerARM:\t\treturn \"WSA\";\tcase RuntimePlatform.Android:\t\treturn \"Android\";\tcase RuntimePlatform.IPhonePlayer:\t\treturn \"iOS\";\tcase RuntimePlatform.OSXEditor:\tcase RuntimePlatform.OSXPlayer:\t\treturn \"OSX\";\tdefault:\t\tthrow new Exception (\"Platform not listed\");\t}}If you like the Azure Storage Services library for Unity let me know about it on Twitter. Any issues, features or blob storage demo requests please create it as an issue on github for others to learn from and collaborate.",
      "summary":"Previously I’ve looked at using Azure App Services for Unity, which provided a backend for Unity applications or games using Easy Tables and Easy APIs. But what if I wanted to lift and shift heavier data such as audio files, image files, or Unity Asset Bundles binaries? For storing these...",
      "date_published": "2017-03-10T11:14:11+00:00",
      "tags":["Azure","Blob Storage","Unity3d"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2017}
    },{
      "id": "code-unity-git",
      "url": "https://www.deadlyfingers.net/code/unity-git",
      "title":"Merging Unity scenes, prefabs and assets with git",
      "content_text":"When it comes to working as a team on the same project we are all thankful for source control. But even if you’re cool with git there are some things to be aware of when starting new source controlled Unity projects that should help to reduce the chance of nasty merge conflicts.Solo ScenesSomething to generally avoid in Unity is working on the same scene. Thats why the question of how to merge a scene when a team of developers are working on it is a fairly hot topic. One basic strategy is for each person to clone the main scene and work on their own version, then nominate a scene master to combine the various elements into in the main scene to avoid conflicts. But because this is quite a restricted way of working Unity 5 introduced Smart Merge and the UnityYAMLMerge tool that can merge scenes and prefabs semantically.Asset Serialization using “Force Text”By default Unity will save scenes and prefabs as binary files. But there is an option to force Unity to save scenes as YAML text based files instead. This setting can be found under the Edit &gt; Project Settings &gt; Editor menu and then under Asset Serialization Mode choose Force Text.But as this is not the default setting make sure when applying this mode that everyone else on the team is happy to switch.If you select “Force Text” to save files in YAML format you should add a .gitattributes file that tells git to treat *.unity, *.prefab and *.asset files as binary to ensure git doesn’t try to merge scenes automatically. Paste the following into the .gitconfig file inside your Unity project:*.unity binary*.prefab binary*.asset binaryAnother result of saving in text file mode is that you can see the changes in source control commits.Setting up UnityYAMLMerge with GitYou can access the UnityYAMLMerge tool from command line and also hook it up with version control software. Paste the following into the .gitconfig file inside your Unity project:UnityYAMLMerge (Windows):[merge]tool = unityyamlmerge[mergetool \"unityyamlmerge\"]trustExitCode = falsecmd = 'C:\\Program Files\\Unity\\Editor\\Data\\Tools\\UnityYAMLMerge.exe' merge -p \"$BASE\" \"$REMOTE\" \"$LOCAL\" \"$MERGED\"UnityYAMLMerge (Mac):[merge]tool = unityyamlmerge[mergetool \"unityyamlmerge\"]trustExitCode = falsecmd = '/Applications/Unity/Unity.app/Contents/Tools/UnityYAMLMerge' merge -p \"$BASE\" \"$REMOTE\" \"$LOCAL\" \"$MERGED\"GitMerge for UnityWorth a mention is the free GitMerge tool for Unity for merging scene and prefabs inside Unity Editor but unfortunately this editor plugin is currently broken in Unity 5. Once you start merging and are in a git merge state you can resolve the conflicts inside the Unity app using GitMerge Window for Unity which is opened via menu Window &gt; GitMerge.Merging Unity C# script conflicts with P4Merge appFor merging conflicts I prefer to use the free P4Merge visual merge tool which is available for Mac and Windows. Here’s how to hook up the P4Merge app as the global git merge tool when issuing the git mergetool command:P4Merge (Windows):git config --global merge.tool p4mergegit config --global mergetool.p4merge.path 'C:/Program Files/Perforce/p4merge.exe'P4Merge (Mac):# Setup p4merge as a visual mergetoolgit config --global merge.tool p4mergetoolgit config --global mergetool.p4mergetool.cmd \"/Applications/p4merge.app/Contents/MacOS/p4merge \\\"$BASE\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$MERGED\\\"git config --global mergetool.p4mergetool.keepTemporaries falsegit config --global mergetool.p4mergetool.trustExitCode falsegit config --global mergetool.p4mergetool.keepBackup falsegit config --global mergetool.p4mergetool.prompt false# Setup p4merge as a visual diff toolgit config --global diff.tool p4mergetoolgit config --global difftool.p4mergetool.cmd \"/Applications/p4merge.app/Contents/Resources/launchp4merge \\\"$LOCAL\\\" \\\"$REMOTE\\\"# show updated git configgit config --global --listSetup a .gitignore file for Unity projectsFirst up there are certain Unity folders and files you don’t want to include in the repo. Only ‘Assets’ and ‘ProjectSettings’ need to be included. Other Unity generated folders like ‘Library’, ‘obj’, ‘Temp’ should be added to the .gitignore file. Or you can just copy the boilerplate Unity .gitignore file. I also suggest ignoring generated files like OS and source control temp files:# Source control temp files*.orig# OS generated.DS_StoreUnfortunately I made the over zealous mistake of adding all *.meta files to the .gitignore file. At first this seemed like a good idea until the repo gets cloned and you end up with broken script and resource links in the Unity Editor scene. The Unity source control documentation mentions that these .meta files should be added to source control. However I found that its only the meta files associated with resource files and scripts that are linked to a GameObject in the Unity Editor that are required. By using the exclusion rule in gitignore I can limit it so the only .meta files to be saved are those within the Unity special folders like: ‘Prefabs’, ‘Resources’, ‘Scenes’ as well as a ‘Scripts’ folder. So if you wish to limit the meta files just add the following rules to the .gitignore:# Include only the .meta files in specific folders*.meta!Assets/[Ee]ditor/**/*.meta!Assets/Editor Default Resources/**/*.meta!Assets/[Gg]izmos/**/*.meta!Assets/[Pp]refabs/**/*.meta!Assets/[Rr]esources/**/*.meta!Assets/[Ss]cenes/**/*.meta!Assets/[Ss]cripts/**/*.meta!Assets/Standard Assets/**/*.meta!Assets/StreamingAssets/**/*.metaFor example if I import the Azure AppServices library for Unity by copying it into the Assets/AppServices directory that would mean no meta files would be pushed in commits for this folder as it’s outside the Assets/Scripts folder. But what if I use a library that will be linked with GameObjects like TSTableView for example which attaches to a Unity UI Scroll View. Either I can drop the TSTableView folder inside the Assets/Scripts directory, or if you prefer to keep third party scripts outside as I do then you also need to add the Assets/TSTableView directory to the list of exceptions in the .gitignore file:!Assets/TSTableView/**/*.metaIf you adopt this convention just be aware that every time you add third party MonoBehaviour script libraries outside the Assets/Scripts folder then these directories will need to be added as .gitignore exceptions to save the associated .meta files.",
      "summary":"When it comes to working as a team on the same project we are all thankful for source control. But even if you’re cool with git there are some things to be aware of when starting new source controlled Unity projects that should help to reduce the chance of nasty...",
      "date_published": "2016-09-19T10:30:38+01:00",
      "tags":["Git","Unity3d","Visual Studio"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2016}
    },{
      "id": "code-swift-json-parsing-for-ios-development",
      "url": "https://www.deadlyfingers.net/code/swift-json-parsing-for-ios-development",
      "title":"Swift JSON parsing for iOS development",
      "content_text":"Recently I started a new iOS Swift project and spent way more time than I would like trying to find a JSON parser that could handle the various JSON data models I was working with. In this post I will document some real code samples that should prove useful for other iOS developers looking to get off to head start with data modelling in Swift.The search for a Swift JSON parser…Handling JSON is a very common task with modern app development whether its consuming some REST Service API, loading a JSON file or document objects from database. With regards to Windows C# apps Newtonsoft JSON is the popular choice and similarly with Java for Android there is GSON. But what library to use for iOS apps? Previously I had used libraries like JSONModel to parse JSON data into native objects and it worked pretty well. But the iOS developer landscape has changed with the shift from Objective C to Swift so I wanted to find a Swift based framework. There are a number of open source Swift JSON parsers, but the ones I tried resulted in code mountains just to parse some format of JSON. This felt like a fail compared to the elegant manner of Newtonsoft or GSON object models. I was surprised how hard it was to pinpoint the one Swift library that could satisfy all my parsing needs. But with Argo I feel I’ve discovered the golden JSON parsing library for iOS Swift development.Getting on board with ArgoI’m a long time user of CocoaPods for Xcode source control projects as it makes it easier to avoid jamming up a repro with binaries. However the precompiled versions on CocoaPods don’t always provide the latest version available on GitHub. This is where Carthage comes in as you specifically request a tag version or branch on GitHub. Carthage can be quickly installed using Homebrew as mentioned in the [installing Carthage docs].(https://github.com/Carthage/Carthage#installing-carthage)brew install carthageTo setup create a new text file and save it as ‘Cartfile’ inside your Xcode project folder. (In this case I’m requesting a specific version of Argo and Curry for use with Swift 2)github \"thoughtbot/Argo\" == 3.0.2github \"thoughtbot/Curry\" == 2.2Once you have installed Carthage and saved a ‘Cartfile’ then you need to build the frameworks.  In Terminal navigate to the project folder and run carthage update to build frameworks for all platforms. NB: For packages that can only be built for a single platform use carthage build --platform iOS  Drop built ‘*.framework’ folder into Xcode project  Add Build Phases &gt; Run Script carthage copy-frameworks and add Input Files path to ‘*.framework’JSON data modelling with ArgoArgo decodes standard property types (String, Int, UInt, Int64, UInt64, Double, Float, Bool) as well as arrays and optional properties. You can decode a nested object or an array of nested objects that conform to the ‘Decodable’ protocol. In fact you can even do inception - using the same struct within itself as shown below. One thing that might require explanation is Argo’s sugar syntax. The summary of the sugar syntax is this:  &lt;^&gt; syntax pulls the first property, and &lt;*&gt; pulls subsequent properties.  &lt;| syntax relates to a property.  &lt;|? syntax relates to an optional property.  &lt;|| syntax relates to an array of ‘decodable’ objects.  &lt;||? syntax relates to an array of optional ‘decodable’ objectsimport Foundationimport Argoimport Currystruct SomeModel {    let id : String    let name : String    let total : Int    let isHighlighted : Bool    let optional : String?    let children : [SomeModel]?}extension SomeModel: Decodable {    static func decode(j: JSON) -&gt; Decoded&lt;SomeModel&gt; {        return curry(SomeModel.init)            &lt;^&gt; j &lt;| \"_id\"            &lt;*&gt; j &lt;| \"name\"            &lt;*&gt; j &lt;| \"total\"            &lt;*&gt; j &lt;| \"highlighted\"            &lt;*&gt; j &lt;|? \"optional\"            &lt;*&gt; j &lt;||? \"children\"    }}What about decoding JSON values into native types like NSURL and NSDate?It can be advantageous to parse URL and date values as native types instead of String types. To get this to work with Argo you need to make a parser which wraps NSURL and NSDate in the ‘Decoded’ type. But first I made a Uri helper to encode url strings as NSURL and a Date helper to convert a date string (of a known format) to NSDate.import Foundationclass Uri {    static func encodeURLString(urlString: String) -&gt; String {        let characterSet = NSMutableCharacterSet()        characterSet.formUnionWithCharacterSet(NSCharacterSet.URLPathAllowedCharacterSet())        characterSet.formUnionWithCharacterSet(NSCharacterSet.URLQueryAllowedCharacterSet())        return urlString.stringByAddingPercentEncodingWithAllowedCharacters( characterSet ) ?? urlString    }}import Foundationenum DateFormats : String {    case Milliseconds = \"yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSS'Z'\"    case Seconds = \"yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'\"}class Date {    static private let dateFormatter = NSDateFormatter()        // converts String (using array of potential date formats) to Date    static func StringToDate(dateString : String) -&gt; NSDate? {        var date : NSDate? = nil        let dateFormats : [String] = [DateFormats.Milliseconds.rawValue, DateFormats.Seconds.rawValue]        for dateFormat in dateFormats {            dateFormatter.dateFormat = dateFormat            if let formatedDate = dateFormatter.dateFromString(dateString) {                date = formatedDate                break            }        }        return date    }}The Parser helper returns objects wrapped in Decoded type:import Foundationimport Argoclass Parser {        static func toNSURL(urlString : String) -&gt; Decoded&lt;NSURL&gt; {        let urlEncodedString = Uri.encodeURLString(urlString)        guard let url = NSURL(string: urlEncodedString) else {            return Decoded.Failure(DecodeError.Custom(\"Failed to parse String to NSURL\"))        }        // Return NSURL wrapped in .Success        return pure(url)    }        static func toNSDate(dateString : String) -&gt; Decoded&lt;NSDate&gt; {        guard let date = Date.StringToDate(dateString) else {            return Decoded.Failure(DecodeError.Custom(\"Failed to parse String to NSDate\"))        }        // Return NSDate wrapped in .Success        return pure(date)    }        // optional (nil values are allowed)        static func toOptionalNSDate(dateString : String?) -&gt; Decoded&lt;NSDate?&gt; {        guard let str = dateString else {            return pure(nil) // No date string        }        guard let date = Date.StringToDate(str) else {            return Decoded.Failure(DecodeError.Custom(\"Failed to parse String to NSDate\"))        }        // Return NSDate wrapped in .Success        return pure(date)    }}Example model with NSURL and NSDate using the Parser helper (note the extra brackets):import Foundationimport Argoimport Currystruct SomeModel {    let id : String    let url : NSURL    let dateCreated : NSDate?}extension SomeModel: Decodable {    static func decode(j: JSON) -&gt; Decoded&lt;SomeModel&gt; {        return curry(SomeModel.init)            &lt;^&gt; j &lt;| \"_id\"            &lt;*&gt; (j &lt;| \"url\" &gt;&gt;- Parser.toNSURL)            &lt;*&gt; (j &lt;|? \"date_created\" &gt;&gt;- Parser.toOptionalNSDate)    }}Three things to avoid in your JSON models for smoother sailing with Argo  Two dimensional arrays (arrays within an array) aren’t handled out of the box. There are multi-dimensional array workarounds but it can cause compiler melt down if your model is particularly complex. Better to avoid this complexity by flattening arrays to a single array or use nested property arrays.  Best to limit object model to no more than 10 properties. This is because there are limits of how many things can be curried with Argo before the complier gives up. Try to use nested objects to group things together, but if that is not possible then there are techniques to deal with complex expressions.  Array of mixed objects (dynamic types). Argo can be made to decode an array of different types but it will increase complexity as you will have to use subclasses instead of structs.How to load JSON file within iOS app bundle in SwiftOften the first thing I like to do is to load a JSON file to configure my app. For example you might have various JSON config files for localhost, staging and production settings.{    \"app_url\": \"https://someapp.azurewebsites.net\",}The data model using Argo &amp; Curry would look like this in Swift:import Foundationimport Argoimport Currystruct ConfigModel {    let appUrl: String}extension ConfigModel: Decodable {    static func decode(j: JSON) -&gt; Decoded&lt;ConfigModel&gt; {        return curry(ConfigModel.init)            &lt;^&gt; j &lt;| \"app_url\"    }}To load the JSON file within the app bundle I use a file helper:// returns json from filestatic func loadJSON(file: String) -&gt; AnyObject? {    let path : String? = NSBundle.mainBundle().pathForResource(file, ofType: \"json\")    guard let unwrappedPath = path else {        return nil    }    let fileContents : NSData? = NSData(contentsOfFile: unwrappedPath)    guard let data = fileContents else {        return nil    }    do {        return try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.AllowFragments)    } catch let error as NSError {        print(error.localizedDescription)    }    return nil}The loaded JSON can be parsed into the ‘ConfigModel’ using Argo’s decode method.func loadConfig(file:String) -&gt; ConfigModel? {    let json : AnyObject? = loadJSON(file)    if let j = json {        return decode(j)    }    debugPrint(\"Error with \\(file).json file\")    return nil}While this is fine for converting one type of object, what if you have multiple data models? You could quickly end up with a lot of repetitive code. One of the powerful things with Swift 2 is that it supports Abstract Types. Argo needs a little help to ensure the abstract type conforms to the Decodable type so there is slightly more boilerplate in this case, but it should help keep things DRY.func loadJSONFile&lt;T: Decodable where T == T.DecodedType&gt;(file : String) -&gt; T? {    let json : AnyObject? = loadJSON(file)    if let j: AnyObject = json {        return decode(j)    }    debugPrint(\"Error with \\(file).json file\")    return nil}The JSON config file can be loaded in AppDelegate in the ‘didFinishLaunchingWithOptions’ method:var config: ConfigModel? func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool {    config = loadJSONFile(\"config\")    return true}Parsing JSON response from REST serviceI also needed to parse various JSON results provided by via REST service API. To handle the REST request here I’ll be using the Alamofire library for Swift. Alamofire can also be added to the Cartfile:github \"Alamofire/Alamofire\" ~\\&gt; 3.4Below is an example snippet taken from a login POST request. When using Alamofire the JSON data is available as response.result.value which can be parsed with the Argo decode method.func login(username: String, password: String) {    let authURL : NSURL = NSURL(string: \"https://some_auth_endpoint\")        // Request body params    let parameters : [String: AnyObject] = [        \"username\": username,        \"password\": password    ]        // Initiate async request using Alamofire     Alamofire.request(.POST, authURL, parameters: parameters, encoding: .JSON).responseJSON {        response in                // Return early on failure        guard response.response?.statusCode == 200 else {            let alert = UIAlertController.init(title: \"Error\", message: \"Failed to login, please check username and password.\", preferredStyle: .Alert)            alert.addAction(UIAlertAction(title: \"Ok\", style: .Cancel, handler: {(alertAction: UIAlertAction) in                alert.dismissViewControllerAnimated(true, completion: nil)            }))            self.presentViewController(alert, animated: true, completion: nil)            return        }                // Parse JSON result value using Argo        guard let result = response.result.value,              let authToken: AuthTokenModel = decode(result) else {            debugPrint(\"Auth token model parse error\")            return        }                // Login was successful, do stuff here and then navigate to home screen...    }}One thing to point out: I have used very simple parse error detection here - it either decodes or it doesn’t and there is no indication of what went wrong during the decode process. With smaller data models this form of indication is perfectly adequate. But when you are working with complex data models then this type of error reporting is not granular enough to pinpoint the exact the problem if you get a parse error. Fortunately Argo provides a way to parse with failure reporting by using a Decoded type.// Get JSON data from Alamofire responseguard let result = response.result.value else {    print(\"No request result\")    return}// Try decoding model with failure reporting by using Argo's Decoded typelet decodeResult: Decoded&lt;SomeModel&gt; = decode(result)switch(decodeResult) {case .Failure:    print(\"Failed to decode model: \\(decodeResult.error?.description)\")    returncase .Success:    print(\"Decode success\")}// Assign decoded value to data modelguard let report : SomeModel = decodeResult.value else {    print(\"Error unwrapping Report result\")    return}I found this an absolutely invaluable technique to be able to debug issues with my complex models, especially as models are pretty verbose and its always hard to spot that one string mistake.What’s next…What about storing loaded data for offline use? JSON documents can be stored with revisions using a Couchbase Lite database. The problem here is Argo only accommodates decode, but the native objects will need encoded back into JSON for use with Couchbase. This is where Ogra (Argo in reverse) comes in. The only thing is you will need to extend the data object with an encode method. If you found this post useful or if you would be interested to see some Ogra to Couch examples just fire me a tweet @deadlyfingers.",
      "summary":"Recently I started a new iOS Swift project and spent way more time than I would like trying to find a JSON parser that could handle the various JSON data models I was working with. In this post I will document some real code samples that should prove useful for...",
      "date_published": "2016-08-23T09:37:01+01:00",
      "tags":["Alamofire","Argo","JSON","Swift"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2016}
    },{
      "id": "code-creating-content-with-web-components",
      "url": "https://www.deadlyfingers.net/code/creating-content-with-web-components",
      "title":"Creating content with Web Components",
      "content_text":"Many web projects rely on a CMS of some description. The system itself is not important, but rather the content it helps to create. The primary function of a CMS is to enable the creation of content - it should empower content creation. If a new project requires a CMS the question that would tend to spring into a developer’s mind is - can I use an existing CMS already out there, or do I need to build a CMS from scratch for this project? But before that can be answered, perhaps some simple questions need to be asked first.Asking the simple questions…Content Management Systems are designed to make it easier to create and publish content. With so many open source systems available there’s a good chance you can find something to do the job you need. Often in the case where additional functionality is required most systems can be extended with some sort of plugin to add that ‘must have’ feature. So why would you ever need to build your own CMS from scratch? This decision should not hang solely upon application’s technical requirements, but rather it depends on who will be using it - we need to ask ourselves who will be the one creating the content? Sounds like a simple question, perhaps even an obvious question but it merits deep thought and careful design decisions. If it is a non-technical audience then displaying a bunch of features that the user doesn’t need is distracting, in the worst case intimidating, ultimately leading to a poor user experience. What if you could design something from scratch so it could be tailored exactly to fit the user’s requirements? Imagine if the UI only contained the functions needed without extraneous menu options or clutter and was designed to maximise ease of use and content creation.Starting from scratchRecently I was working on the ‘Badge Builder’ project which required a CMS to author quiz content. But rather than manipulate some existing CMS or plugin that might roughly fit the use case we wondered if we could design and build our own bespoke CMS components during a one week hack. At the very outset of the project we wanted to build a system that would be easy to use and quick to create content regardless of the technical abilities of the user.The main problem with building all the CMS components from scratch would be the time required - with only three weeks. However there are a number of things that I feel made the most of the development time we had.Web ComponentsBy leveraging Web Components we could make our own custom HTML elements for each quiz and content element. Common behaviours could also be shared across elements.PolymerDuring our one week hack the Polymer Starter Kit was a good kick start and saved time by setting up a stack of things like node and bower dependencies. Polymer provides a nice UI kit for web apps which can be separately imported for use. The PSK boilerplate is now available through Polymer-cli.SASS and Foundation gridBecause nobody likes working with thousands of lines of CSS, SASS can reduce physical line count and can be easily split into separate files which makes it easier to manage in source controlled projects. Also SASS makes it easy to import Foundation Grid for responsive design.Live reload of server and clientA combination of Nodemon and BrowserSync allowed us to see live updates of all changes made on server and client side. This combo is essential to fine tune the interface and user experience and is my personal ‘must have’ for designing and developing a web app project.Document databaseSaving content as a JSON object allowed greater freedom developing components on client side.Polymer Web ComponentsDeveloping Web Components for each quiz element and content element felt very intuitive. A quiz could be built using a combination of a number of individual quiz and content components.Quiz components:  Single choice          Select the correct answer from a number of options        Multiple choice          Select one or more answers that apply from a number of options        Ordered list          Move options into their correct order using drag and drop        Groups          Move options into their correct groups using drag and drop        Keywords          Type keywords to answer requirements        Comments          Type a number of words to answer      Content components:  HTML          HTML formatted content        Embedded media          Embedded video player using iframe        Link          External url        Section          Split quiz into sections      Reusable elementsTo create reusable Web Components you can use the Polymer Seed Element which sets up a test, demo and documentation page. But rather than have the overhead of managing and publishing multiple custom elements during development, it was faster to have the custom elements bundled with the project - the idea being once we had finished the project we could extract and publish them as separate elements. (One ‘gotya’ to be aware of is that custom element names need to be hyphenated.)All the Web Components for the Badge Builder needed to operate on two different views - the editor (CMS) screen and the interactive viewer (quiz) screen.Badge Builder Editor (CMS)Badge Builder Viewer (quiz)For the editor we wanted the quiz elements to be pretty WYSIWYG so for the most part the same element was used for the editor and viewer. The Polymer dom-if template was a good way to render the parts unique to each view in this case.Displaying dynamic content using Web ComponentsTo render the dynamic components to the page an empty placeholder was used.&lt;div id=\"components\"&gt;&lt;/div&gt;The quiz content was loaded with Polymer’s iron-ajax element and the array of content was parsed in the response handler using a switch statement to check against specific element types.for (var i=0; i&lt;elements.length; i++) {  var element = elements[i];  switch(element.elementType) {    case \"content-html\":      this.addHTML(element.text);    break;    case \"content-video\":      this.addVideo(element.embededURI);      break;    case \"content-button\":      this.addButton(element.buttonURL, element.buttonText);      break;    case \"content-section\":      this.addContentSection(element.title);      break;    case \"quiz-short-input\":      this.addQuizShortInput(element._id, element.question, element.answerKeywords, element.answer, element.hintText, element.showHint);      break;    case \"quiz-long-input\":      this.addQuizLongInput(element._id, element.question, element.answer, element.wordLimit, element.hintText, element.showHint);      break;    case \"quiz-list-groups\":      this.addQuizListGroups(element._id, element.question, element.answer, element.hintText, element.showHint);      break;    default:      this.addQuizElementType(element.elementType, element._id, element.question, element.options, element.answer, element.hintText, element.showHint);      break;  }}Most elements are unique and are handled separately, apart from the default case which for elements that share exactly the same object properties. In this case the element type is passed to the function to create the element and set the properties by using the `document.createElement` method. (The other option is to define  custom constructor but it's not necessary.)addQuizElementType: function(elementType, id, question, options, answer, hintText, showHint) {  var el = document.createElement(elementType); // string should be a hyphenated web component  el._id = id;  el.question = question;  el.options = options;  el.answer = answer;  el.hintText = hintText;  el.showHint = showHint;  this.addElement(el); // add element to the DOM}Once the element has been created and properties set it still needs added to the DOM. This is handled with `appendChild(element)` Javascript method. Notice that we can use Polymer's &#8216;`$`&#8217; selector to append children to our div tag with `id=\"components\"`. Because the elements are added dynamically in Javascript and therefore manipulating the DOM it is necessary to wrap the selector using the Polymer DOM API.addElement: function (element, isCreated) {  element.edit = true;  element.classList.add(\"draggable\");  Polymer.dom(this.$.components).appendChild(element);}The add element method was used when loading saved content, but also when adding new elements to the page. One usability tweak is to have the page scroll down to show a newly added component. The problem with scrolling down here is that height of the new element will not be known until the DOM has updated, so we will need to add a listener to handle the `dom-change` event. Now we can scroll down to see the element we have added.scrollDown: function(){  window.scrollTo(0, document.body.scrollHeight);},listeners: {  'dom-change' : \"scrollDown\"}Saving dynamic content using Web ComponentsTo save the dynamic content for each element I would need to be able to get the content as JSON. A nice way to handle this for all components is to use a shared behaviour. This would hold the `_id` property assigned by the database and also assign the element's type using the built-in method `this.localName`.&lt;link rel=\"import\" href=\"../../../bower_components/polymer/polymer.html\"&gt;&lt;script&gt;  window.QuizBehaviors = window.QuizBehaviors || {}; // Behavior namespace  /** @polymerBehavior QuizBehaviors.DataModelBehavior */  QuizBehaviors.DataModelBehaviorImpl = {    properties: {      /**       * The `id` of the element for database       * @type {string}       */      _id: {        type: String,        value: function() {          return \"\";        }      },    },    /**     * Returns the JSON data model for saving.      * NB: To capture more properties the `getData` method can be overridden by the custom element.     */     getData: function() {       return {         _id : this._id,         elementType : this.localName       };     }  };  QuizBehaviors.DataModelBehavior = [    QuizBehaviors.DataModelBehaviorImpl  ];&lt;/script&gt;Finally, when changes need to be saved it's just a case of returning a list of all our custom elements and grabbing the data as JSON using the element's `getData` behaviour. This data array can then be posted using Polymer's `iron-ajax` element for saving to the database.getElements: function(){  return Polymer.dom(this.$.components).querySelectorAll('.draggable');},getElementsData: function(){  var elementsData = [];  var elements = this.getElements();  var i = elements.length;  while(i--){    var el = elements[i];    var data = el.getData();    elementsData.unshift(data);  }  return elementsData;}You can find the Badge Builder project on github and if you want to know more you can read the full code story on the Microsoft Developer blog.",
      "summary":"Many web projects rely on a CMS of some description. The system itself is not important, but rather the content it helps to create. The primary function of a CMS is to enable the creation of content - it should empower content creation. If a new project requires a CMS...",
      "date_published": "2016-08-22T17:19:59+01:00",
      "tags":["Javascript","Polymer","Web Components"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2016}
    },{
      "id": "tutorial-azure-app-services-for-unity3d",
      "url": "https://www.deadlyfingers.net/tutorial/azure-app-services-for-unity3d",
      "title":"Azure App Services for Unity3d",
      "content_text":"Azure Mobile Services will be migrated to App Services on Sept 1st 2016. To prepare for this migration I’ve renamed and updated the open source Mobile Service Unity3d projects to support Azure App Service going forward.Using Azure App Services to create highscores leaderboard for UnityTo demonstrate the Azure App Service I have created a sample Highscores demo for Unity to insert, update and query a user’s highscores. But to run the project in Unity Editor you will need to hook it up to an Azure App Service. Using an Azure account simply create a new App Service in the Azure portal, (for this demo I am using an App Service with Javascript backend). In a couple of minutes the Azure App Service should be up and running and ready to configure.  Open Settings, search for Easy Tables and add a ‘Highscores’ table.  Set all table permissions to allow anonymous access to start with.  Manage schema to add Number column for ‘score’ and String column for ‘userId’  Additionally, if you want to store user data or game scores you can enable authentication using Facebook, Twitter, Microsoft account or Google account. If you want to use the Facebook login in this demo you will need to create a Facebook app. Once you’ve created the Facebook app add the Facebook App ID and Secret to your Azure App Service Facebook Authentication settings.Then configure the Facebook App Basic and Advanced settings with your Azure App Service URL:If in doubt how to configure these settings check out the Azure App Service documentation.      Once authentication is setup the ‘Highscores’ table script can be edited to save ‘userId’information.     table.insert(function(context) {   if (context.user) {     context.item.userId = context.user.id;   }   return context.execute(); });            In addition to table scripts you can also create custom APIs. In Settings, search for Easy APIs and add an example ‘hello’ API.     module.exports = {   get: function(req, res, next) {     res.send(200, { message: \"Hello Unity!\" });   } };      Once you have setup Azure App Service you can update the Unity scene with your App Service ‘https’ url and hit run!",
      "summary":"Azure Mobile Services will be migrated to App Services on Sept 1st 2016. To prepare for this migration I’ve renamed and updated the open source Mobile Service Unity3d projects to support Azure App Service going forward.Using Azure App Services to create highscores leaderboard for UnityTo demonstrate the Azure App Service...",
      "date_published": "2016-05-16T15:42:13+01:00",
      "tags":["Azure","App Services","Unity3d"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2016}
    },{
      "id": "code-responsive-design",
      "url": "https://www.deadlyfingers.net/code/responsive-design",
      "title":"Responsive Design from problem to production",
      "content_text":"Responsive Design is often seen in terms of technical execution or production. In this article I will describe what it means to design responsively as a design process from problem to production.Contents:  Responsive Design for designers  Responsive Design for developers  Responsive Design in productionBackgroundThe need for responsive designThe idea of designing multiple versions of a website optimized for mobile and desktop might sound like a good idea, but a separate design approach will not scale easily as “the number of unique screen resolutions being used to access web sites is increasingly varied and growing at a rapid pace” [1]. I only have to look back at my last three phones I’ve purchased and each one has a larger physical display than the last one. (Admittedly this was not always by choice as the new models I wanted were not made available in the smaller form factor, due to the “bigger is better” [2] style trend of the phone industry.) As a result, my phone displays more pixels than my old 20” desktop screen which is easier to comprehend with the release of phones with 4K displays. So if I end up on some mobile ‘optimized’ site with reduced functionality or content I will always request the full-fat Desktop experience. I feel the very fact that there is a button to request the ‘Desktop version’ of a website on a mobile device is like an admission of design failure.Responsive design is the ability for a website to display the same content across all screen sizes and resolutions often by using a resizable layout or grid (therefore removing the need for the user to choose what version of the site they want to see). Ethan Marcotte who first described ‘Responsive Design’ as the way forward proposed “rather than tailoring disconnected designs to each of an ever-increasing number of web devices, we can treat them as facets of the same experience” [3]. Since then there have been plenty of articles describing the technical characteristics of responsive web design and why it is recommended; ultimately our goal is about creating the best experience for users, but responsive design will benefit SEO for mobile searches as well.IntroWhat makes good design?There are many design apps and developer tools available, but some tools and techniques are better suited for responsive web design. But before I launch into responsive design I’d like to consider the design aspect. If I was to share one truth from my time learning graphic design and all the years of experience as a designer, it would be; good design needs a good problem. As a designer I always have the desire to produce an award winning or world class design for every project. To reproduce success is really hard and that’s why designers develop some form of working habit or pattern to try to repeat successful outcomes. This is often explained as the ‘Design Process’. I don’t wish to cover every variation of the design process but I feel its good practice to review the general principles:  Research / investigation  Design brief  Generation of ideas  Synthesis  Final design and productionThe word ‘design’ infers the need to solve a particular problem. Therefore, it is important to start the design process with knowledge and thought. Sometimes its all to easy to think we know enough about what the end product should look like that we fail to investigate or question the motivation for design. When the problem isn’t immediately obvious it will take a certain amount of research into the subject to be able to ask the right questions to find out the problem which the design will aim to solve. When the problem is known, we can describe the solution which will solve the problem - this forms the design brief. When it comes to generating ideas it maybe helpful to have a brain storming session first. The best ideas (traditionally three) are identified as concepts for further development and design synthesis. Finally, the strongest concept is selected as the solution for final design and production.I encourage designers to define your own design process (or pattern for success). When Steve Jobs asked designer Paul Rand to generate some logo ideas for them to look at he declined suggesting that he would only present them with the solution to their problem. I admire Rand’s thinking – I feel when I have to ask a client about which options they prefer its usually because I haven’t found the right solution yet.Responsive design is the recognised technical solution to the diverse screen size problem, but we must always consider the design aspect of a project. I must constantly challenge myself to find a good problem to solve. Without a good problem to solve I will just be pushing pixels and not fulfilling my purpose as a designer.Responsive Design for designersIf you are a designer for print it helps to have an understanding of the print production process. Similarly, with responsive web design it is important to know how responsive developer tools operate. When it comes to design for print designers use grids and guides for page layout. This grid layout mechanism is similar for web developers except the grid will dynamically resize depending on window or screen size. The most popular grids for responsive design are Bootstrap and Foundation so even if you don’t like to get your hands dirty with code, it is something that anyone can play with and see how design elements (or columns) will react as the dynamic grid changes with different widths. By default, both grid systems use a 12 column grid but you can also customize the number of columns with Bootstrap and with Foundation using Sass. Designers who have a grasp of how the dynamic grid operates on the production or development side will be in a better position to create ‘responsive-ready’ designs.Design toolsWhen I started designing for web there was only the desktop browser to think about so the basic approach of designing for the lowest common resolution worked well. Initially I used Photoshop for web designs with pixel perfect layouts. But as consumer monitors became capable of displaying greater resolutions it was possible to reproduce richer layouts influenced by print design. Illustrator became a superior tool for web design as it offered advanced control of grids and guides originally used for print design. Illustrator was also vector based and that made it easier to stretch out graphics as screens got bigger. Because of this I feel vector based tools are vastly more equipped for responsive design work than pixel-based design tools. But while Illustrator is a great tool for seasoned print design professionals, some digital designers might prefer something a little lighter and easier to use like Sketch or the new Experience Design app. However, the problem with all these design tools is that none can produce design with responsive information. Even the new digital design apps still feel like design for print tools stuck with static canvas layouts and limited bitmap resizing that fail to scale in a way that mimics the production process (ie. CSS background properties). Because of the lack of professional tools capable of responsive design that means the designer has to do extra work. For responsive designs I will design at least two size layouts for each page. I like to design a page in portrait aspect to represent a mobile view, and landscape aspect to represent desktop or tablet. So as long as a designer understands how responsive grids or dynamic columns work, then these designs should be easily fused together during development or production stage.Responsive Design for developersThere is an abundance of tools for developing responsive websites. But just like I mentioned that it was important for designers to think about the development or production I also feel responsive web developers should be mindful of the design side. Developers need to be aware of the current problem that professional design tools don’t contain responsive information and that means they will need to work closer with designers to figure out how to merge separate designs into one single responsive design. Responsive web developers will need to be familiar with the design grid so that they can turn page designs into a single dynamic layout of HTML and CSS.The language of responsive web designCSS is the design language of the web. But CSS is rather an unwieldy art that does not sit comfortably in a designer or developer camp. I find CSS must be constantly tweaked along with the HTML elements to achieve the required layout, especially with the added complication of responsive design media queries. It is therefore preferential to use web technologies that are fast to deploy and allow live refreshing when developing responsive design.Responsive web kitJust like I encouraged designers to make their own design process, I also encourage developers to use or discover the web technologies that will work best for producing the website or web app.Unsurprisingly it’s not possible to cover every web technology in one article so I will explain the reasons behind the web technologies that I’ve been consistently using for my recent projects. Plus, I really want to share my favourite client-side web design / developer stack because if you are passionate about design I think you will like it too!Project dependenciesResponsive web projects tend to use a number of third party dependencies, and package managers can be used to help install and version manage them all. Bower is awesome for managing project dependencies like Bootstrap or jQuery. While NPM is great for install testing and build tools like Gulp and BrowserSync. Package management is also advantageous for source controlled projects as it can be easily setup to prevent committing a shed load of third party code into your repro. Following this procedure means contributor commits are kept clean and will make it easier to inspect changes or code review.Design as you goA painter will add strokes of paint to his canvas, while a sculptor will chip bits of a rock to expose an image. Designing websites is a progressive art that is both additive like a painter and subtractive like a sculptor. Can you imagine asking a painter or sculptor to work blind folded? As a designer I can’t produce my best work unless I have real-time feedback of my adjustments. I need to see and interact with my design in real-time and across multiple devices. That’s why BrowserSync is the single most important responsive design tool for client-side web development. ‘Live reload’ or ‘live preview’ is important for web design, and with responsive web design it’s mission critical to test all the desktop and touch screens!A UI kit for web appsEver wanted to replicate the performance of the native UITableView on iOS or ListView on Android? Polymer’s ‘iron-list’ and ‘iron-image’ elements can be used to create ‘buttery-smooth’ scrolling recyclable lists at 60fps. Polymer is also built on top of Web Components which allows you create your own reusable elements, but Polymer also provides a ‘Material Design’ UI kit suited for responsive web app development. I also find the template and binding model lends itself well for creating responsive designs. Polymer is well suited for developing SPAs (single page applications) and can support client-side routing.Smarter CSSDesign should be an enjoyable art, but can you imagine what a lot of CSS is like to manage! All these responsive elements, layout grids, images and glyphs will add lines and lines of CSS. The sheer amount of CSS required by a responsive design project could very easily and quickly become unmanageable. Sass or SCSS is just like writing CSS, except you can do it with less code and fewer lines of code are easier to manage. Sass variables will enable designers to create a theme to easily define or tweak colours, type styles and spacing. Another powerful feature is ‘mixins’ which can be used to reuse common styles, define responsive media queries, generate image tiles, build font faces and include browser prefixes. Sass will reduce the number of lines of CSS you need to manage.Responsive GridWhen it comes to responsive web design the use of a popular grid system like Bootstrap is a good place to start. I do feel however the default four tier grid system (xs, sm, md, lg) of Bootstrap 3 doesn’t give me enough granular control to deal with phone vs phablet sized devices. So I use the Bootstrap grid as a starting point and usually add extra media queries for smaller mobile devices. Bootstrap 4 promises to address this issue and will deliver a more comprehensive five tier grid system (xs, sm, md, lg, xl) for responsive design amongst other differences./* Bootstrap 3 four tier grid */@mixin media-xs() {  @media (max-width: 767px) {    @content;  }}@mixin media-sm() {  @media (min-width: 768px) {    @content;  }}@mixin media-md() {  @media (min-width: 992px) {    @content;  }}@mixin media-lg() {  @media (min-width: 1200px) {    @content;  }}HD is the new standardRetina displays are everywhere these days! If you walk into a phone shop today, I reckon it would be harder to find a phone without an HD display. The new HTML5 picture element allows developers to specify higher resolution images so the graphics will display sharper. But I still prefer to use CSS media queries to handle ‘Retina’ (@2x) and ‘Retina HD’ (@3x) images.@mixin media-2x() {  @media (min-resolution: 144dpi),    (min-device-pixel-ratio: 1.25),    (-webkit-min-device-pixel-ratio: 2) {    @content;  }}@mixin media-3x() {  @media (min-resolution: 288dpi),    (min-device-pixel-ratio: 2.25),    (-webkit-min-device-pixel-ratio: 3) {    @content;  }}I find the CSS method gives more control over scaling, cropping and positioning which can be advantageous for responsive designers. With the CSS background image methods I can also use an image sprite technique to load in a texture map (or texture atlas) of tiled images and this improves page load times as there will be less http requests.@mixin bg-position($row, $col, $width, $height) {  background-position: (-$col * $width) (-$row * $height);}@mixin bg-size($rows, $cols, $width, $height) {  background-size: ($cols * $width) ($rows * $height);}One final thing though, high definition images are much larger in filesize so make sure to compress all bitmaps! ImageOptim is a great image compression tool I use on Mac, though they also recommend File Optimizer for Windows.Vector glyphsWith responsive design there is always a need to scale graphics. Vector graphics are resolution independent and can be scaled to any size and that makes them a great asset. The good news it that most modern browsers support SVG. But if you have a set of vector icons that are monochromic, then a neater way to bring these to web is by exporting them all as a custom font. Icomoon is a free online tool to create custom font glyphs. Oh, and because its seen as a font you can take advantage of CSS font sizing and colour properties.Automate all the thingsGulp makes it easy to develop with full source, or build a minified version for production. Gulp also watches for source code changes and works in conjunction with BrowserSync. So whether you fiddle with HTML, edit a line of script, tweak a style, modify an image or asset it can notify BrowserSync to reload. Gulp can even compile Sass into normal CSS for reloading live design changes.ProductionBuilding web apps with CordovaCordova tools make it easy to package your web app as a hybrid app for distribution on multiple app stores. But the big challenge for web app developers is creating a user experience that will look and feel as good as a native app.App-ify web view behavioursThe web view provided by iOS and Android come with a number of behaviours that are designed to improve user experience with websites. In a website context this is true, but when it comes to responsively designed web apps these web view behaviours result in undesirable effects as far as an app experience is concerned:  Page bounce or spring – pages have a bounce or spring effect, but apps don’t bounce.  Double tap zoom – pages allow double tap regional zooming, but apps don’t zoom.  300ms tap delay – page interactions are artificially slower to accommodate the double tap zoom gesture, but apps don’t exhibit unresponsiveness.  Long tap inline magnification – pages allow prolonged selection for inline magnification, but apps don’t show inline magnification everywhere.  Global user selection – page selection is everywhere, but apps only provide selection where user input is desired.Fortunately, most of these web view behaviours can be tamed so a hybrid app can behave in a native app manner that a user would expect.  Page bounce or spring behaviour can be disabled by setting Cordova’s ‘DisallowOverscroll’ preference to ‘true’.    &lt;preference name=\"DisallowOverscroll\" value=\"true\"&gt;&lt;/preference&gt;        Double tap zoom behaviour can be disabled by setting Cordova’s ‘EnableViewportScale’ preference to ‘true’ and setting the HTML5 viewport meta tag to disable user scaling.    &lt;preference name=\"EnableViewportScale\" value=\"true\"&gt;&lt;/preference&gt;        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\"&gt;        The 300ms click delay is fixable on Chrome by setting the device width on the HTML5 viewport meta tag (shown above).  Long tap inline magnification can be disable by setting Cordova’s ‘Suppresses3DTouchGesture’ preference to ‘true’.    &lt;preference name=\"Suppresses3DTouchGesture\" value=\"true\"&gt;&lt;/preference&gt;        Global user selection can be disabled with CSS ‘user-select’ set to ‘none’ (including the usual browser prefixes (https://developer.mozilla.org/en-US/docs/Web/CSS/user-select)). With iOS ‘-webkit-touch-callout’ also needs to set to ‘none’ to disable the touch callout.    body {  -webkit-touch-callout: none;  -webkit-user-select: none;  -moz-user-select: none;  -ms-user-select: none;  user-select: none;  cursor: default;}      NB: As this turns off all user selection, you might need certain elements or form inputs to allow user selection. In this case certain exceptions can be added using the :not() CSS selector.Turbo web view performance for iOSWhile there are quite a number of things you can do to improve web page performance, one of the recent hybrid app performance headlines for iOS is the availability of WKWebView which provides faster performance than the older UIWebView. Cordova supports WKWebView but there is a need to install the WKWebView Cordova plugin and set the ‘CordovaWebViewEngine’ preference to use ‘CDVWKWebViewEngine’ in Cordova’s ‘config.xml’ file.cordova plugin add cordova-plugin-wkwebview-engine --save&lt;feature name=\"CDVWKWebViewEngine\"&gt;  &lt;param name=\"ios-package\" value=\"CDVWKWebViewEngine\"/&gt;&lt;/feature&gt;&lt;preference name=\"CordovaWebViewEngine\" value=\"CDVWKWebViewEngine\" /&gt;A couple of time saving Cordova scripts  Cordova app icon asset generator. I also created a ruby script for batch image resizing for generating all the app icons and launch images for iOS and Android platforms.  Faster Cordova web app deployment on iOS with Hotwire IPA scriptSummaryResponsive web design for designers  Understanding the dynamic grid to design responsively  Separate designs that lend themselves to a single responsive design  The advantages of vector-based design toolsResponsive web design for developers  Understanding the design grid to merge separate designs  Responsive design with multiple device testing and live reloading  Developer web kit for responsive designProduction of hybrid app  Removing the unwanted web view behaviours for responsive Cordova hybrid apps  Turn on turbo performance of Cordova hybrid apps for iOS  Scripts to help production of Cordova hybrid apps across platformsReferences:1. Jason Sperling (2013) The Big Argument for Responsive Design [Online] Viget. Available: https://www.viget.com/articles/the-big-argument-for-responsive-design [Accessed 2 May 2016]2. Ben Taylor (2014) Why smartphone screens are getting bigger: Specs reveal a surprising story [Online] PCWorld. Available: http://www.pcworld.com/article/2455169/why-smartphone-screens-are-getting-bigger-specs-reveal-a-surprising-story.html [Accessed 2 May 2016]3. Ethan Marcotte (2010) Responsive Web Design [Online] A List Apart. Available:http://alistapart.com/article/responsive-web-design/ [Accessed 2 May 2016]Additional media:  Responsive Design slidedeck from talk at DECODED 2016 Conference in Dublin.",
      "summary":"Responsive Design is often seen in terms of technical execution or production. In this article I will describe what it means to design responsively as a design process from problem to production.Contents: Responsive Design for designers Responsive Design for developers Responsive Design in productionBackgroundThe need for responsive designThe idea of...",
      "date_published": "2016-05-06T12:06:45+01:00",
      "tags":["Cordova","Design","Responsive Design","RWD"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2016}
    },{
      "id": "code-making-sense-of-web-app-debug-logs-on-multiple-android-and-ios-devices",
      "url": "https://www.deadlyfingers.net/code/making-sense-of-web-app-debug-logs-on-multiple-android-and-ios-devices",
      "title":"Making sense of web app debug logs on multiple Android and iOS devices",
      "content_text":"If you’ve ever needed to debug Cordova web apps on iOS and Android it can be quite an awful experience for a web developer. Since working on Postcard web app I’ve found a couple of neat tips to help make sense of those noisy debug logs.From localhost to native landDesigning and developing in localhost is familiar territory to web developers and so it makes sense to try and get as much work done there as possible. But when you need to use the physical hardware features of a mobile platform the only way to see if things really work is to go native.For Cordova app development on Android there are a few ways to debug web apps but usually it’s a case of cordova build android then cordova run android --device --debug. Then if you have setup Android SDK’s PATH environment var you can run monitor in command line to open up the Android Device Monitor app to see all the logs.For Cordova app development on iOS it’s usually cordova build ios in Terminal and then you just open the project in Xcode to debug the app.Both these options allow you to run and debug multiple devices although you have to tab or switch views to see the other devices logs. Also Android logs are so noisy it’s almost impossible to spot the stuff you want to look at. Ideally I would like to look at all logs at the same time and dial in on the stuff I’m really interested in.While developing the Postcard app I mocked up the UX flow to perform an Identity Exchange with two devices using our peer to peer Thali Cordova plugin for iOS and Android. Needless to say the Android logs got very busy and I also wanted to be able to get the logs of iOS devices outside of Xcode sessions. Thankfully there are a couple of better ways to debug multiple Android and iOS devices from one Mac —Debugging Cordova web apps on multiple Android devices using adb and logcat filteringList android devices attached:adb devicesBecause I have two android devices attached I want to be able to target both from command line.cordova run android --debug --target=ZX1C224H9F cordova run android --debug --target=YT91138019Once Cordova has installed the app on device you can use logcat to see the logs in Terminal. However with multiple devices you want to use adb -s to target a device and then use logcat -s to filter out all the noise! With the Postcard app we are using jxcore to run Node.js on mobile so I used ‘jxcore-log:*’ as my filter.adb -s YT91138019 logcat -s jxcore-log:\\*In another Terminal tab or split window in iTerm.adb -s ZX1C224H9F logcat -s jxcore-log:\\*Now that’s much cleaner and stuff doesn’t scroll faster than you can actually read! ;)Assuming the Android device is already developer enabled you can also inspect the web view and javascript console logs in Chrome: chrome://inspect/#devicesDebugging Cordova web apps on multiple iOS devices using iOS ConsoleWith iOS all you need to do is attach your devices and download iOS Console which is a handy freeware app to view iOS logs on a Mac with filtering. With our iOS Postcard app I have set the filter to ‘jxcore’.iOS Console doesn’t need Xcode running and the logs are a lot cleaner than the default Console app.Also you can inspect the web view and javascript console in Safari once the app is running. In Safari browser go to:Safari &gt; Preferences &gt; Advanced and turn on “Show Develop menu in menu bar” then select:Safari &gt; Developer &gt; Device NameNote: If you are using mobile Safari to test your web app instead of Cordova then you will have to enable “Web Inspector” on the iOS device under Settings &gt; Safari &gt; Advanced",
      "summary":"If you’ve ever needed to debug Cordova web apps on iOS and Android it can be quite an awful experience for a web developer. Since working on Postcard web app I’ve found a couple of neat tips to help make sense of those noisy debug logs.From localhost to native landDesigning...",
      "date_published": "2015-11-13T16:39:00+00:00",
      "tags":["Android","Cordova","iOS"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2015}
    },{
      "id": "code-faster-cordova-web-app-deployment-with-hotwire-script",
      "url": "https://www.deadlyfingers.net/code/faster-cordova-web-app-deployment-with-hotwire-script",
      "title":"Faster Cordova web app deployment with hotwire script",
      "content_text":"Building for iOS can be very time consuming. Every time you make changes to a Cordova web app you need to do a cordova build to update the app project. Then you have to go into Xcode to debug on device. But if you don’t need to make changes to native code and you only need to update web elements like HTML, Javascript, image and media files then you can save time by just updating those bits.I’ve made a Hotwire IPA bash script to replace the ‘www’ web app folder with the updated directory. All you need to do is create an ‘*.ipa’ archive and the hotwire script can quickly update it with all web app changes and deploy to device (without need to jailbreak).Example usage:sh hotwire-ipa.sh -f ~/Desktop/app.ipa -d \"www\" -p ~/Cordova/app/www -b ~/Cordova/app/platforms/ios/www -iwhere:-f is the path to *.ipa archive-d is the dir to delete inside app-p is the dir to copy in place-b is the dir with Cordova build plugins and scriptsSetup and instructions for deploying iOS app using hotwire-ipa over on GitHub.Time results for iOS Cordova app:3m 09s - Each time you update web files you need to execute cordova build ios to stage the updates.0m 38s - Open in Xcode8m 10s - Debug from XcodeTotal: 11m 57sTo run the script we need to first create an Archive and export it as an *.ipa archive in Xcode. Once this is done then future updates can be pushed using the script.2m 53s - Create Archive2m 13s - Export as .ipa4m 39s - Deploy to device using hotwire-ipa script with -i switch to install as *.ipa instead of *.app.Total: 8m 45s (11m 54s if you include initial cordova build ios)That’s 3 minutes 12 seconds saved the first time if you have already done cordova build ios just to compile the native code, then 7 minutes 18 seconds saved to deploy repeated web app updates.All times recorded using Postcard web app (using ‘Story_0’ branch) on MacBook 1.2 GHz Intel Core M",
      "summary":"Building for iOS can be very time consuming. Every time you make changes to a Cordova web app you need to do a cordova build to update the app project. Then you have to go into Xcode to debug on device. But if you don’t need to make changes to...",
      "date_published": "2015-10-16T14:00:03+01:00",
      "tags":["Cordova","iOS"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2015}
    },{
      "id": "tutorial-azure-mobile-services-for-unity3d",
      "url": "https://www.deadlyfingers.net/tutorial/azure-mobile-services-for-unity3d",
      "title":"Azure Mobile Services for Unity3d",
      "content_text":"State of playIf you’ve followed my previous Unity3d Azure tutorials I’ve covered two well known Unity Azure plugins - Prime31 and Bitrave. Bitrave had better multi-platform support, however it required the ‘JSON.NET’ paid asset to support iOS and Android. But then there was issues with iOS AOT compiler. Because of this I decided to start a new Azure Mobile Services library for Unity3d to support multi-platforms like Unity3d - iOS, Android and Windows without need for paid plugins.Using Azure Mobile Services in Unity3dYou can drop the Unity3dAzure libraryinto your existing Unity project or try out the demo project to get started.Getting started      Download the Unity3d Azure demo project or use git to clone the project:     git clone https://github.com/Unity3dAzure/MobileServicesDemo.git            Create a Mobile Service          Create ‘Highscores’ table for app data      Modify ‘Highscores’ table Insert node script to save userId      Create a custom API called ‘hello’            In Unity3d open scene Scenes/HighscoresDemo.unity          Check the Demo UI script is attached to the Camera. (The script can be attached by dragging &amp; dropping the Scripts/HighscoresDemoUI.cs script unto the Scene’s ‘Main Camera’ in the Hierarchy panel.)            Paste Azure Mobile Service app’s connection strings into Unity Editor Inspector fields (or else directly into script Scripts/HighscoresDemoUI.cs)          Mobile Service URL      Mobile Service Application Key            If you want to save score with userId then create Facebook app          Fill in Azure Mobile Service’s Identity &gt; Facebook settings (App Id &amp; App Secret)      Paste Facebook access user token into Unity Editor Inspector field (or else directly into Scripts/HighscoresDemoUI.cs)Play in UnityEditor      CreditsSpecial thanks to Jason Fox and Bret Bentzinger who put together the UnityRestClient library using the JsonFX plugin.",
      "summary":"State of playIf you’ve followed my previous Unity3d Azure tutorials I’ve covered two well known Unity Azure plugins - Prime31 and Bitrave. Bitrave had better multi-platform support, however it required the ‘JSON.NET’ paid asset to support iOS and Android. But then there was issues with iOS AOT compiler. Because of...",
      "date_published": "2015-09-25T11:30:26+01:00",
      "tags":["Mobile Services","Unity3d"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2015}
    },{
      "id": "code-developing-a-web-app-that-behaves-like-a-native-app",
      "url": "https://www.deadlyfingers.net/code/developing-a-web-app-that-behaves-like-a-native-app",
      "title":"Developing a web app that behaves like a native app",
      "content_text":"Like many developers out there I started out coding for the web. So you might think it would be easier to develop a web app than a native app, right? The short answer is no… but web app development is getting better and the performance gap is closing.Thoughts on web app vs native app developmentDelivering a world-class UX is the main reason to opt for native development. Web app performance has quite some way to go especially on the vast majority of low spec devices. For example even if you get your web app running at a buttery smooth 60fps in iOS Safari, it doesn’t automatically mean you get that sort of performance in an app’s UIWebView.  iOS Tip: Don’t be content testing any web app or web UI framework in Safari and think that it works. A real web app development test is only done by running it inside an embedded WebView.What you have to be careful off is getting sucked into some web app framework because you can get some decent results pretty quickly, but as soon as you add a little more complexity things can start to break and the speed of development will slow as a result. Whereas while native development might take longer to learn initially, after that you can start building some pretty slick apps just using the standard suite of UI components provided.Ultimately things are getting better for web app development but probably not enough as to make native app developers want to consider switching. But with all the modern browser javascript speed optimisations and mobile devices becoming ever more powerful it’s worth considering a web app where the ability to share code is most important. After all who wouldn’t rather develop code once that works across mobile and desktop and leverages the extensive web developer knowledge base? So the compelling reason to build a web app is that your code should run on any screen that runs a modern browser.Postcard appI’ve been involved with developing the Postcard app which is a web app for demoing a peer to peer web experience using the Thali Cordova plugin. Throughout the design, development and build process of this web app I’ve encountered a number of issues or pain points and thought it would be good to share the golden nuggets I’ve learnt while trying to develop a web app that behaves like a native app!Icons and splashes generator for Cordova web appWith any project I always like to start with design before I jump into development. Design is a time consuming task but some things can be automated like resizing all those app icons and splashscreens across multiple platforms. I wrote a time saving Ruby script to build app icons and splashscreens for iOS and Android with Cordova’s image filenames and sizes. (Usage and instructions are in the gist)Designing a web app across different screens - live!Many web apps take advantage of node and there is a great module for designers called BrowserSync.npm install -g browser-syncBrowserSync allows you live preview all your design or code changes across multiple screens. That means you can test your web app in real-time on any browser on Mac or Windows as well as hook up the web app on iPhone, iPad or Android. Also when you interact on one screen for example following a link or scrolling the page this automatically updates everywhere else. This is a must have for any responsive design or adaptive design work! Polymer 1.0 - a UI kit for web appsFor the UI design side of things I choose Polymer 1.0 due to it’s host of web app elements inspired by a native app’s UI kit. Initially I didn’t like all the custom element names, as this reminded of an Angular wild west of element names but you can quickly learn the Polymer core elements and view the documentation and source behind them. Also there is a benefit to this as it prevents the usual ‘div nest of inception’ meaning that an HTML layout can be understood at a glance.Getting started developing with PolymerThe trickiest thing is actually getting all the Polymer elements you need to use as these all come separately which of course makes sense later for production. But do yourself a favour and just install all the paper, iron and neon elements for no hassle development.bower install --save PolymerElements/paper-elements bower install --save PolymerElements/iron-elements bower install --save PolymerElements/neon-animationShould I use Polymer’s ‘on-click’ or ‘on-tap’ event?There is a 300ms click delay issue that affects mobile web apps. The good news is that there is a simple fix by using the viewport meta tag with width=device-width property. But the bad news is that this trick only works in Chrome 32+ on Android.&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;Thankfully Polymer tries to handle this issue for you if you use the on-tap event however it doesn’t appear to currently trigger a click on Mac Safari (using an iframe web app). So if desktop Safari compatibility is more important then you may have to stick with the standard on-click event until this is fixed. Or just incase you already use a ‘fast click’ javascript polyfill it may run into issues due to click delay complications with the iOS 8 web view.Meet ‘iron-list’ - the UITableView for web appPolymer’s iron-list element is essential for scrolling large amounts of data on mobile devices. It does this by using a virtual list and recycling (20) cells to handle smooth scrolling of 1000s of items. One note of caution is that this runs fine in Safari browser but there is currently a scrolling issue in iOS 8 WebView beyond a certain number of items. If only UIWebView would behave the same as Safari then development would run so much smoother!Make it feel like a native app - not a web site!It’s important to make sure things act like an app and not feel like a website thrown inside a Cordova webview. There are a couple of giveaway indicators that can be fixed, although not everything will behave perfectly.Disable the scrolling bounce effectWhile adding the magical web app meta tags will give you full screen control in the browser it doesn’t get rid of the web page scrolling spring effect common with iOS and Mac. Now while the spring effect provides a wonderful UX in a web browsing context - native app’s don’t spring! To disable this unwanted behaviour the first thing to do is to enable the DisallowOverscroll preference in Cordova’s config.xml.&lt;preference name=\"DisallowOverscroll\" value=\"true\"&gt;&lt;/preference&gt;If you are not using Cordova then you can disable the iOS webview scroll:[[webView scrollView] setScrollEnabled:NO];It’s always a good idea to do a CSS reset on the html,body and then add the following to disable the bounce effect in the browser:html,body {    width: 100%;     height: 100%;     padding: 0;     margin: 0; }/* disable webkit bounce effect in the browser */html,body {    overflow: hidden;     -webkit-overflow-scrolling: touch;}Disable select copy/pasteAnother annoying web behaviour inherited is that everything is selectable on a web page. Again a useful behaviour in a web browsing context but not so much with a web app. Besides not feeling right there is a UX issue if a user taps the ‘wrong way’ instead of activating a button click as expected they end up in a text selection mode. The easiest workaround is setting user-select to none on the ‘body’. NB: If your web app contains form inputs then you can exclude those inputs using the :not() CSS selector but I find it easier to switch everything off by default./* disable iOS text selection */body {    -webkit-touch-callout: none;    -webkit-user-select: none;    -khtml-user-select: none;    -moz-user-select: none;    -ms-user-select: none;    user-select: none;    cursor: default;}The one problem you still get with iOS UIWebView is that you always get a magnifying glass when doing a long-press and unfortunately there is no simple way of disabling this without hacking UIWebView private APIs.Prevent scrolling nav bar when editing inputA quirk with web apps on iOS is trying to fix a nav bar so it won’t scroll off the screen when editing an input or textarea that would obscure the soft-keyboard when it pops up. One trick is to position your input as high up the page as possible in order to avoid the issue. But sometimes this isn’t always possible so the other option is to try a hacky workaround discussed on SO which also seems to work pretty well with Polymer:&lt;textarea placeholder=\"Message\" class=\"flex\" on-focus=\"shouldFocusWithoutScrollUp\"&gt;&lt;/textarea&gt;Polymer({\t// hack for iOS to prevent scrolling view up when soft keyboard pops up\tshouldFocusWithoutScrollUp : function(e) {\t\tif( this._isiOS() ) {    \t\te.target.style.webkitTransform = 'translate3d(0px,-10000px,0)';     \t\twebkitRequestAnimationFrame(function() { this.style.webkitTransform = ''; }.bind(e.target));    \t}\t},\t_isiOS : function() {\t\treturn navigator.userAgent.match(/iPhone|iPad|iPod/i);\t}});In Cordova if you want to enable Javascript focus() calls to open the soft-keyboard you can disable the KeyboardDisplayRequiresUserAction preference. Although bear in mind iOS8 now supports focus() calls but I found the input and keyboard can lose connection sometimes.&lt;preference name=\"KeyboardDisplayRequiresUserAction\" value=\"false\"&gt;&lt;/preference&gt;Problems with web app when running as a native iOS app…I encountered quite a number of problems when running a web app inside the iOS 8 UIWebView. I have listed the main issues below to watch out for with possible workarounds:[WebActionDisablingCALayerDelegate setBeingRemoved:]: unrecognized selector sent to instance 0x174009d20*** WebKit discarded an uncaught exception in the webView:willRemoveScrollingLayer:withContentsLayer:forNode: delegate: -[WebActionDisablingCALayerDelegate setBeingRemoved:]: unrecognized selector sent to instance 0x174009d20Solution: Add body style for -webkit-transform. This WebView bug occurred when animating an element sliding up from the bottom of the page. It caused the animation to jump and skip frames and seemed to trigger memory warnings.body {\t-webkit-transform: translateZ(0px); /* hack for iOS8 iframe scroll issue */}[46377:7026777] Received memory warning.Solution: If you’ve tested for memory leaks then try disabling animations. If this solves the issue then try to optimise your script so that expensive business logic is called only after animations are completed.Message from debugger: failed to send the k packetSolution: Keep app awake! In the app delegate enable setIdleTimerDisabled:- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {    // Override point for customization after application launch.    [application setIdleTimerDisabled:YES]; // don't sleep    return YES;}  iOS Tip: When testing web apps on iOS it can take so long to build and debug on device that the screen locks and the deploy fails. Use the setIdleTimerDisabled to keep the app alive for debugging!",
      "summary":"Like many developers out there I started out coding for the web. So you might think it would be easier to develop a web app than a native app, right? The short answer is no… but web app development is getting better and the performance gap is closing.Thoughts on web...",
      "date_published": "2015-09-11T10:09:52+01:00",
      "tags":["Android","Cordova","iOS","WebApp"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2015}
    },{
      "id": "code-developing-a-peer-to-peer-web-for-ios",
      "url": "https://www.deadlyfingers.net/code/developing-a-peer-to-peer-web-for-ios",
      "title":"Developing a peer to peer web for iOS",
      "content_text":"To establish peer to peer (p2p) communication on iOS devices there is an API for that known as the Multipeer Connectivity framework. There are a couple of things to bear in mind about this framework:  Discovers and connects with iOS devices but will not discover devices on other platforms like Android  Maximum number of 7 invitees (client peers)  Will raise a prompt for user acceptance of a peer connection requestIntro to Thali project for iOSThali is an experimental open source p2p project that promises to enable p2p web to run on mobile devices. This is quite a big undertaking so to make life easier to begin with we can start to look at the iOS to iOS p2p connectivity story which is documented as Thali “Story -1”.The spec will use the TCP internet standard to transport data across peers therefore all mobile devices will run a Node.js layer. In order to run Node.js on iOS we use a Cordova plugin which runs JXCore. This will then connect with a native TCP bridge which will relay the data over the iOS Multipeer Connectivity framework. The flow is illustrated in the diagram below:How to build Thali demo for iOSIf you like playing with bleeding edge code you can build the “Story -1” iOS dev branch. (NB: You will need two iOS devices with Bluetooth 4.0 support.)To run this build script in Terminal you will need Node.js. If you haven’t already got Node.js installed you can get Node.js with NVM for Mac OS X.Install the Cordova package:npm install -g cordovaBuild Thali “Story -1” demo for iOS:#!/bin/bashHOME_DIR=\"Code\"PROJECT_DIR=\"ThaliTest-1-ios\"mkdir -p ~/$HOME_DIRcd ~/$HOME_DIRcordova create ~/$HOME_DIR/$PROJECT_DIR com.test.thalitest ThaliTestcd $PROJECT_DIRcordova platform add ioscordova plugin add https://github.com/thaliproject/Thali_CordovaPlugin.git#story-1-dadougla# copy sample 'www' dircp -a -R -v plugins/org.thaliproject.p2p/sample/ios/www ./# build iOS projectcordova build# open iOS project in Xcodeopen platforms/ios/ThaliTest.xcodeprojHow all the parts work inside the Xcode project…There are three main parts or layers in the Thali iOS project:      Cordova          All demo UI code is handled by “thali_main.js” script.            JXCore          UI actions will trigger a call to functions in “app.js” script which is responsible for running all our Node.js code and calling the native methods as documented in the Thali common API.            Native Plugins          All native methods called from JXCore are registered in “THEAppContext.m” defineJavaScriptExtensions method      What about Android p2p?More info about Thali for Android is available on Dr Jukka’s blog.What about iOS and Android p2p?More info about future Thali development including iOS and Android p2p interoperability is documented on Thali stories.",
      "summary":"To establish peer to peer (p2p) communication on iOS devices there is an API for that known as the Multipeer Connectivity framework. There are a couple of things to bear in mind about this framework: Discovers and connects with iOS devices but will not discover devices on other platforms like...",
      "date_published": "2015-07-30T12:00:26+01:00",
      "tags":["iOS"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "code",
        "year":2015}
    },{
      "id": "tutorial-using-azure-cli-on-mac-os-x-to-create-mobile-service",
      "url": "https://www.deadlyfingers.net/tutorial/using-azure-cli-on-mac-os-x-to-create-mobile-service",
      "title":"Using Azure CLI on Mac OS X to create Mobile Service",
      "content_text":"One of our startups at MS Ventures was looking to use the command line to manage their Azure account on Mac. If you prefer using Mac OS X Terminal or iTerm and have an Azure account then you should check out the Azure CLI tools for Mac.Install Azure CLI for MacYou can either download the Azure Command Line tools installer for Mac or install the Azure command line tools using nodejs. I have previously written a post covering installing nodejs using NVM.npm install -g azure-cli@0.8.17Test Azure command works with help:azure -hDownload Azure Publish Settings fileSign in to your Azure account and download your *.publishsettings subscription file.Import Publish Settings fileImport path to downloaded Azure Publish Settings file:azure account import &lt;file.publishsettings&gt;  Tip: You can drag &amp; drop the file into Terminal instead of typing the link.Show Azure account subscriptions:azure account listCreate Mobile Service with Azure CLICreate Mobile Service TerminalTest:azure mobile create TerminalTest --push \"nh\"  You will be prompted to enter SQL admin user name and password. The Mobile Service should only take a couple of minutes to provision.Show Mobile Service details including applicationUrl and applicationKey:azure mobile show TerminalTest  You will want to make a note of your applicationUrl and applicationKey for CRUD examples below.Create Table Items:azure mobile table create TerminalTest ItemsShow Tables:azure mobile table list TerminalTestRead Table Items:azure mobile data read TerminalTest ItemsCRUD examples with Mobile Service using curlYou can quickly execute Create, Read, Update and Delete operations with Mobile Services using curl commands. Here’s a quick overview of Mobile Service CRUD operations and methods:            Operation      Method      REST URL format                  Create / Insert      POST      https://&lt;service_name&gt;.azure-mobile.net/tables/&lt;table_name&gt;              Read / Query      GET      https://&lt;service_name&gt;.azure-mobile.net/tables/&lt;table_name&gt;              Update      PATCH      https://&lt;service_name&gt;.azure-mobile.net/tables/&lt;table_name&gt;/&lt;item_id&gt;              Delete      DELETE      https://&lt;service_name&gt;.azure-mobile.net/tables/&lt;table_name&gt;/&lt;item_id&gt;      You will need to replace the X-ZUMO-APPLICATION header value below with your own Mobile Service applicationKey.  Create / Insert     curl --request POST \\ --header 'X-ZUMO-APPLICATION: RLKPKSRTzFUFgXqVLRPkUTOKorqRQV65' \\ --header 'Content-Type: application/json; charset=UTF-8' \\ --data '{\"text\":\"hello mac\",\"complete\":false}' \\ --location 'https://terminaltest.azure-mobile.net/tables/Items'        Change the data text to submit a couple of items… Note you will get a JSON response with the id of the inserted item. This item id value is to be used in the Update and Delete examples below.    Read / Query     curl --request GET \\ --header 'X-ZUMO-APPLICATION: RLKPKSRTzFUFgXqVLRPkUTOKorqRQV65' \\ --header 'Content-Type: application/json; charset=UTF-8' \\ --location 'https://terminaltest.azure-mobile.net/tables/Items'        Update     curl --request PATCH \\ --header 'X-ZUMO-APPLICATION: RLKPKSRTzFUFgXqVLRPkUTOKorqRQV65' \\ --header 'Content-Type: application/json; charset=UTF-8' \\ --data '{\"complete\":true}' \\ --location 'https://terminaltest.azure-mobile.net/tables/Items/C9CCC7F7-4F16-4F63-8ACD-BD2DCC32F4CC'          ^ Data updates shown in Azure Mobile Service table.     Delete     curl --request DELETE \\ --header 'X-ZUMO-APPLICATION: RLKPKSRTzFUFgXqVLRPkUTOKorqRQV65' \\ --header 'Content-Type: application/json; charset=UTF-8' \\ --location 'https://terminaltest.azure-mobile.net/tables/Items/C9CCC7F7-4F16-4F63-8ACD-BD2DCC32F4CC'      More documentation on Azure xplat-cliHow to query and filter Mobile Service table data with curlGet items marked as completecurl --request GET \\--header 'X-ZUMO-APPLICATION: RLKPKSRTzFUFgXqVLRPkUTOKorqRQV65' \\--header 'Content-Type: application/json; charset=UTF-8' \\--location \"https://terminaltest.azure-mobile.net/tables/Items?\\$filter=(complete%20eq%20true)\"Get items starting with text ‘hello’ with total count of results:curl --request GET \\--header 'X-ZUMO-APPLICATION: RLKPKSRTzFUFgXqVLRPkUTOKorqRQV65' \\--header 'Content-Type: application/json; charset=UTF-8' \\--location \"https://terminaltest.azure-mobile.net/tables/Items?\\$filter=(startswith(text,'hello'))&amp;\\$inlinecount=allpages\"Get a collection of items in order (eg. pagination):curl --request GET \\--header 'X-ZUMO-APPLICATION: RLKPKSRTzFUFgXqVLRPkUTOKorqRQV65' \\--header 'Content-Type: application/json; charset=UTF-8' \\--location \"https://terminaltest.azure-mobile.net/tables/Items?\\$orderby=text%20desc&amp;\\$skip=1&amp;\\$top=1\"NB: Just be aware if you use double quotes for --location then you must escape the dollar signs that prefix the params with a backslash (eg. \\$). Single quotes don’t require dollar escaping but you may have trouble encapsulating filters with quoted strings hence I have opted for double quotes in these query examples.",
      "summary":"One of our startups at MS Ventures was looking to use the command line to manage their Azure account on Mac. If you prefer using Mac OS X Terminal or iTerm and have an Azure account then you should check out the Azure CLI tools for Mac.Install Azure CLI for MacYou...",
      "date_published": "2015-04-10T15:20:34+01:00",
      "tags":["Azure","Mobile Services","Azure-CLI"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2015}
    },{
      "id": "tutorial-ember-cli-todo-example-app-with-azure-mobile-services",
      "url": "https://www.deadlyfingers.net/tutorial/ember-cli-todo-example-app-with-azure-mobile-services",
      "title":"Ember-CLI ToDo example app with Azure Mobile Services",
      "content_text":"BackgroundWhen you create an Azure Mobile Service you can download a ToDo sample app to help you get started on a number of platforms including Windows, iOS and Android. There are also cross platform options available with Xamarin or web app development using PhoneGap or HTML/Javascript. Recently I came across a pretty neat Javascript framework called Ember for creating web apps. While you can go ahead and quickly download the Ember Starter Kit to try out some of the introductory snippets listed on the Emberjs homepage, the better option for serious development of Ember apps is to use Ember-CLI. The Ember Command Line Interface gets you up and running with a full MVC framework and helps install project dependencies using NPM (Node Package Manager) and Bower. Having just started learning Ember-CLI myself I thought it might be useful to do a getting started tutorial showing how to hook it up with Azure Mobile Services to create a ToDo app with same functionality as the other offerings already available on the Mobile Services quick-start page.PrerequisitesBefore you can start using Ember-CLI you will need Node.js installed.How to install Node.js on Windows  node (64-bit)  node (32-bit)Alternatively you can manage multiple node versions using the latest nvm-setup Windows installer.nvm install 0.12.0 nvm use 0.12.0See nvm-windows for more commands.How to install Node.js on MacIf you’re using a Mac its better to install Node.js using NVM (Node Version Manager) rather than install as admin/sudo user. Run the following commands in Terminal:git clone https://github.com/creationix/nvm.git ~/.nvm &amp;&amp; cd ~/.nvm &amp;&amp; git checkout `git describe --abbrev=0 --tags`# Edit bash profile nano ~/.bash_profileexport NVM_DIR=\"/Users/YOUR_USERNAME/.nvm\" [-s \"$NVM_DIR/nvm.sh\"] &amp;&amp; . \"$NVM_DIR/nvm.sh\"# Loads nvm source ~/.bash_profilenvm install 0.12.0 nvm alias default v0.12.0NB: In new Terminal sessions you may need to run nvm use default. If you want to you can add this to your bash profile to setup automatically.nvm use defaultOr for a specific node version:nvm use v0.12.0Once you have node installed you can check its working by getting the version:node -v npm -vInstalling Ember-CLI and bowerInstall ember-cli, bower and phantomjs globally using the -g switch.npm install -g ember-cli npm install -g bower npm install -g phantomjsCreating the Todo example app using Ember-CLI and Azure Mobile Services  Create an Azure Mobile Service  Create example TodoItem table.   Create a new Ember-CLI app    mkdir ~/TodoApp cd ~/TodoApp ember new client cd client        Run in ember client in Browser.    ember serve            Open http://localhost:4200/ in new Browser window to see web app.      Save Azure Mobile Services javascript files into /vendor folder.          MobileServices.Web-1.2.5.js      MobileServices.Web-1.2.5.min.js            Update the Broccoli file Brocfile.js to import /vendor javascripts     var EmberApp = require('ember-cli/lib/broccoli/ember-app'); var app = new EmberApp(); app.import({   development: 'vendor/MobileServices.Web-1.2.5.js',   production:  'vendor/MobileServices.Web-1.2.5.min.js' }); module.exports = app.toTree();            Update the js hint file .jshintrc to recognise the WindowsAzure global namespace.     {   \"predef\": [     \"document\",     \"window\",     \"-Promise\",     \"WindowsAzure\"   ],   \"browser\": true,        Generate TodoItem model, index controller and route. (Generating a route will also generate a Handlebars index.hbs template by default).     ember generate model TodoItem  ember generate controller index  ember generate route index        Create azure service. (Generating a service will also generate an azure-service.js initalizer)    ember generate service azure            Update the services/azure.js script with your own Mobile Service connection strings (on lines 61-62):    import Ember from 'ember';var azureService = Ember.Object.extend({  read : function(table){    console.log(table + \" read\");    return azureService.client().getTable(table).read().then(onComplete, onError);    function onComplete(fulfilled){      console.log(\"read items:\" + fulfilled.length);      return fulfilled;    }    function onError(error){      console.log(\"Error reading item: \" + error);    }  },  insert : function(table, item, model){    console.log(table + \" insert:\" + item.id + \" model:\" + model.length);    return azureService.client().getTable(table).insert(item).then(onComplete, onError);    function onComplete(fulfilledItem){      // NB: use Ember's pushObject / unshiftObject to respect KVO!      model.unshiftObject(fulfilledItem);      console.log(\"inserted item:\" + JSON.stringify(fulfilledItem) + \" model:\" + model.length);      return fulfilledItem;    }    function onError(error){      console.log(\"Error inserting item: \"+error);    }  },  del : function(table, item, model){    console.log(table + \" del:\" + item.id + \" model:\" + model.length);    return azureService.client().getTable(table).del(item).then(onComplete, onError);    function onComplete(fulfilled){      // NB: use Ember's removeObject to respect KVO!      model.removeObject(item);      console.log(\"deleted item:\" + \" model:\" + model.length);      return fulfilled;    }    function onError(error){      console.log(\"Error deleting item: \" + error);    }  },  update : function(table, item){    console.log(table + \" update:\" + item.id);    return azureService.client().getTable(table).update(item).then(onComplete, onError);    function onComplete(fulfilledItem){      console.log(\"updated item:\" + JSON.stringify(fulfilledItem));      return fulfilledItem;    }    function onError(error){      console.log(\"Error updating item: \" + error);    }  }});//  creates static properties and methods for the classazureService.reopenClass({  APPLICATION_URL : \"https://MOBILE_SERVICE_URL.azure-mobile.net/\",  APPLICATION_KEY : \"\",  mobileServiceClient : null,  client : function(){    if(this.APPLICATION_URL === \"\" || this.APPLICATION_KEY === \"\") {      var error = \"Please configure your Azure Mobile Service URL &amp; Application KEY (app/services/azure.js 61-62)\";      alert (error);      throw (\"\\n\" + error);    } else {      if (this.mobileServiceClient == null) {        console.log(\"Creating Mobile Service Client...\");        this.mobileServiceClient = new WindowsAzure.MobileServiceClient(this.APPLICATION_URL, this.APPLICATION_KEY);      }      return this.mobileServiceClient;    }  }});export default azureService;        When the app first loads we will need to read a table. In this case we will read the TodoItem table to get a list of TodoItems. When a user needs to add a Todo item we will call the insert method to add an item into a table and update our Ember model for display. The del method will work the same way except the item will be deleted. Finally the update method will be used to save changes to an item, which in this case will be when the TodoItem is completed (stroked out).        Edit models/todo-item.js to handle todo text string and a completed boolean so tasks can be marked off:    import DS from 'ember-data';export default DS.Model.extend({  // NB: You may not set 'id' as an attribute on your model  text: DS.attr('string'),  completed: DS.attr('boolean')});        The TodoItem model consists of a string property for the Todo text and a boolean property to say if the Todo item has been completed.        Edit routes/index.js and set model to read TodoItems table:    import Ember from 'ember';export default Ember.Route.extend({  model: function(){    var service = this.get('azureService');    var table = 'TodoItem';    console.log(\"service:\" + service);    return service.read(table);  }});        As ember serve auto updates as you save changes you should see some activity in your Browser’s console log.        In the Browser’s console log you might get a refused to connect error “because it violates the following Content Security Policy directive: connect-src ‘self’” that means we need to update our environment config. To fix this add the following contentSecurityPolicy settings to the ENV var in config/environment.js to allow connections to *.azure-mobile.net:    /* jshint node: true */module.exports = function(environment) {  var ENV = {    modulePrefix: 'client',    environment: environment,    baseURL: '/',    locationType: 'auto',    EmberENV: {      FEATURES: {        // Here you can enable experimental features on an ember canary build        // e.g. 'with-controller': true      }    },    contentSecurityPolicy: {      'default-src': \"'none'\",      'script-src': \"'self' 'unsafe-inline' 'unsafe-eval' *.azure-mobile.net\",      'font-src': \"'self'\",      'connect-src': \"'self' *.azure-mobile.net\",      'img-src': \"'self'\",      'style-src': \"'self' 'unsafe-inline'\",      'media-src': \"'self'\"    },    APP: {      // Here you can pass flags/options to your application instance      // when it is created    }  };            Update the templates/index.hbs which will be used to display the user interface.    &lt;h3&gt; Todo: {{text}}&lt;/h3&gt;&lt;header&gt;&lt;form&gt;{{input value=text type=\"text\" name=\"text\" placeholder=\"Todo\" autofocus=\"autofocus\"}}&lt;input type=\"submit\" value=\"Add\" disabled&gt;&lt;/form&gt;&lt;/header&gt;&lt;main&gt;&lt;ol&gt;{{#each item in model}}  &lt;/ol&gt;&lt;li&gt;    &lt;label item&gt;      &lt;input type=\"checkbox\" disabled checked&gt;      &lt;span class=\"item.completed\"&gt;{{item.text}}            &lt;button item&gt;Delete  &lt;/button&gt;&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;{{/each}}&lt;/main&gt;              NB: You will get an uncaught error if you try to add, update or delete items as we still need to handle user actions with a controller.            Update the controllers/index.js to handle actions from user interface and delegate them to our Azure service.    /* jshint node: true */module.exports = function(environment) {  var ENV = {    modulePrefix: 'client',    environment: environment,    baseURL: '/',    locationType: 'auto',    EmberENV: {      FEATURES: {        // Here you can enable experimental features on an ember canary build        // e.g. 'with-controller': true      }    },    contentSecurityPolicy: {      'default-src': \"'none'\",      'script-src': \"'self' 'unsafe-inline' 'unsafe-eval' *.azure-mobile.net\",      'font-src': \"'self'\",      'connect-src': \"'self' *.azure-mobile.net\",      'img-src': \"'self'\",      'style-src': \"'self' 'unsafe-inline'\",      'media-src': \"'self'\"    },    APP: {      // Here you can pass flags/options to your application instance      // when it is created    }  };        To allow access to the service from the controller we need to inject the azureService in the initializers/azure-service.js service initializer.    export function initialize(container, application) {  application.inject('route', 'azureService', 'service:azure');  application.inject('controller', 'azureService', 'service:azure');}export default {  name: 'azure-service',  initialize: initialize};                Finally add some styles to grey out and strike through completed items styles/app.css :    body {  font-family: sans-serif;  cursor: default;  margin: 0;  padding: 0;  -webkit-user-select: none;}    header {  margin: 10px;}    span {  color: #000; /* default (incompleted todos) */}    .completed, .true {  color: #999; /* completed tasks are greyed and striked out */  text-decoration: line-through;}button {  float: right;}    ol {  list-style-position: inside;  margin: 0;  padding: 0;  color: #999;}    li {  padding: 10px;}    li:nth-child(odd) {  background:#fcfcfc;}    li:nth-child(even) {  background:#f9f9f9;}    label {  cursor: pointer;}      Download finished Todo ember-cli project on GitHubgit clone https://github.com/deadlyfingers/ember-cli-todo-app-azure.git cd ember-cli-todo-app-azure npm install bower install ember serve",
      "summary":"BackgroundWhen you create an Azure Mobile Service you can download a ToDo sample app to help you get started on a number of platforms including Windows, iOS and Android. There are also cross platform options available with Xamarin or web app development using PhoneGap or HTML/Javascript. Recently I came across...",
      "date_published": "2015-02-28T17:52:59+00:00",
      "tags":["Ember-CLI","Azure","Mobile Services"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2015}
    },{
      "id": "tutorial-unity3d-leaderboard-demo-using-bitrave-azure-plugin",
      "url": "https://www.deadlyfingers.net/tutorial/unity3d-leaderboard-demo-using-bitrave-azure-plugin",
      "title":"Unity3d Leaderboard demo using BitRave Azure plugin",
      "content_text":"  Azure Mobile Service is now App Service, please follow the updated tutorial for App Services for Unity3d instead.This is a quick Unity3d game developer tutorial showing how to save, update and query high scores stored in the Cloud using a Mobile Service and the BitRave Azure plugin.Watch how to create a Leaderboard in the cloud using the Unity3d BitRave plugin.      To save scores in the Leaderboard table you will need to create a Mobile Service.        Get the BitRave plugin with Leaderboard scripts on my GitHub fork.        Create new Unity project.        Copy contents of the BitRave Universal Plugin Assets folder into your Unity3d project’s Assets folder.        Import JSON.NET dependancy from Unity Asset Store.        Open the TestAzure scene.Select Main Camera and remove Script in the Inspector panel. (This will be replaced later.)        Create ‘ Leaderboard ’ table in Azure Mobile Services.        Open AzureUILeaderboard.cs script and replace Azure Mobile Service connection strings.        Drag &amp; drop AzureUILeaderboard.cs script to attach it to the Main Camera.        Now you’re ready to play in Unity Editor add post some high scores!  In this demo project you can submit new scores, return list of all scores and update them. You can also query to show only high scores or get list of a user’s scores.Check it out!Karma Labs on Azure Mobile Services and BitRave plugin in their Unity3d game development.If you are also looking to handle user identity with Mobile Services and configure build settings for iOS and Android development I touch on this in my first getting started with BitRave Azure plugin tutorial.Share your Unity3d #GameDev with @deadlyfingers",
      "summary":"Azure Mobile Service is now App Service, please follow the updated tutorial for App Services for Unity3d instead.This is a quick Unity3d game developer tutorial showing how to save, update and query high scores stored in the Cloud using a Mobile Service and the BitRave Azure plugin.Watch how to create...",
      "date_published": "2014-11-26T10:37:14+00:00",
      "tags":["Android","GameDev","iOS","Azure","Mobile Services","Unity3d"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2014}
    },{
      "id": "tutorial-unity3d-game-dev-with-azure-mobile-services-using-bitrave-plugin",
      "url": "https://www.deadlyfingers.net/tutorial/unity3d-game-dev-with-azure-mobile-services-using-bitrave-plugin",
      "title":"Unity3d game dev with Azure Mobile Services using BitRave plugin",
      "content_text":"  Azure Mobile Service is now App Service, please follow the updated tutorial for App Services for Unity3d instead.This quick-start tutorial is for Unity3d game developers who would like to get a cloud backend that runs across multiple platforms (including the Unity Editor for quick testing). One of the big advantages for game devs using Unity3d is that it supports so many platforms. It’s fair to say more people own more than one device that connects to the internet and a lot of them can run apps and games. While the platforms and ecosystems may differ as a gamer I would like to play the same game across any device (and on any platform) and expect things to sync. Azure Mobile Services is a ‘Backend as a Service’ which supports multi-platform app development. In Unity the BitRave plugin for Azure Mobile Services is designed to just work on any platform that Unity supports.Watch getting started with Unity BitRave Azure plugin running on iOS and Android      To kick off with create a Mobile Service in Azure management portal. If you don’t have an Azure account yet game developers can register for the Cloud GameDev Offer.          NB: A Mobile Service will only take a minute to setup and just a couple of minutes more to become active and ready to use.            Download BitRave plugin.        Create new Unity3d project.        Copy BitRave’s AzureMobileServicesUniversalPlugin/Assets into Unity3d project’s ‘Assets’ folder.        Get JSON.NET Unity asset to enable cross platform support.        Open TestAzure Scene.        Open AzureUI.cs script and replace the connection strings with your own Mobile Service URL &amp; API Key.        The BitRave demo uses Authentication with Facebook. You will need to create a Facebook app for your Mobile Service and copy &amp; paste the App Id and App Secret into your Mobile Service’s IDENTITY Facebook section. Then generate the Facebook Access Token under Facebook’s Tools &gt; Access Tokens.Copy the Access Token and paste into AzureUI.cs script’s Access Token value.          NB: Remember to save changes!            In Unity select the Main Camera and remove the Script in the Inspector panel.Reattach the AzureUI.cs script. (Drag &amp; drop the script onto the Camera.)        Add the demo TodoItem table (in Azure Mobile Service’s get started section).        Run in Unity Editor and connect to Mobile Service.Once logged in you can add a TodoItem.You can query or list all items.Items can be selected to updated.        In Unity Build Settings switch platform to build for iOS. I’ve selected Development Build and Symlink Unity Libraries for smaller/faster builds.To run on the iOS Simulator edit Player Settings and under Target iOS Version menu select Simulator SDK        Open Xcode project to build &amp; run. Rotate iOS simulator to landscape to display UI.Connect to Mobile Services by logging in to add some items.        In Unity Build Settings switch platform to build for Android. I’ve selected Development Build and Google Android Project.Edit Player Settings to change the Bundle Identifier. (This is in reverse domain name notation - for example net.deadlyfingers.DemoApp)        Import Android project into Android Studio.Edit the _AndroidManifest.xml* and change the installLocation attribute to auto.Build &amp; run app. (I find the Nexus 7 tablet API 21 ARM emulator works best with Unity builds.)Rotate Android emulator to landscape to display UI.Connect to Mobile Services by logging in to add some items.  One more thing to todo!You can also record the userId by adding one line of code on the server-side.Edit TodoItem table Script &gt; Insertfunction insert(item, user, request) {  item.userId = user.userId; // adds userId property to insert item from user object.  request.execute();}Score bonus points!Check out my Leaderboard BitRave tutorial showing how to save, update and query high scores stored in the Cloud using a Mobile Service.Share your Unity3d #GameDev with @deadlyfingers",
      "summary":"Azure Mobile Service is now App Service, please follow the updated tutorial for App Services for Unity3d instead.This quick-start tutorial is for Unity3d game developers who would like to get a cloud backend that runs across multiple platforms (including the Unity Editor for quick testing). One of the big advantages...",
      "date_published": "2014-11-21T15:02:28+00:00",
      "tags":["Android","iOS","Azure","Mobile Services","Unity3d"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2014}
    },{
      "id": "tutorial-unity3d-and-cloud-backend-using-azure-mobile-services-and-prime31-plugin",
      "url": "https://www.deadlyfingers.net/tutorial/unity3d-and-cloud-backend-using-azure-mobile-services-and-prime31-plugin",
      "title":"Unity3d and Cloud backend using Azure Mobile Services and Prime31 plugin",
      "content_text":"  Azure Mobile Service is now App Service, please follow the updated tutorial for App Services for Unity3d instead.Unity game developers looking to publish their games on Windows Store might want to add global/local high-score leaderboards, record user achievements and level progress. For example the ability to save level progress is usually important as users tend to own more than one device and won’t really like the idea of starting over again. With Azure Mobile Services it’s really easy to setup a cloud backend for apps so why not use an Azure Mobile Service to provide a backend for your game? The best part is it will only take a couple of minutes to setup!Watch getting started with Unity Prime31 Azure plugin running on Windows  Sign-in to Azure portal. If you don’t have an Azure account yet game developers can register for the Cloud GameDev Offer.  Create Azure Mobile Service        Create Demo TodoItem Table    Get Prime31 “Microsoft Azure Plugin” for Windows 8 Store. (free until July 2015)    When you click on the “Download Now” button, it will prompt you for your name/email. Submit the form to get the download link to the Unity plugin sent to your email.  Download &amp; install Microsoft Azure Mobile Services SDK.    Create new Unity3d project    Download Prime31 plugin from email link and then open the ‘MetroAzure.unitypackage’ package    Import the Prime31 plugin package.    Open “MetroAzure” Scene    Open “MetroAzureDemoUI.cs” Script    Copy &amp; Paste Azure Mobile Services Connection Strings (from Azure Mobile Service portal)            Remember to save changes!        Select File &gt; Build Settings and target Windows Store platform.            “Add Current” scene      Select “Windows Store” and “Switch Platform”      Select C# Solution and SDK “8.1”        Select Player Settings    Under “Metro Unprocessed Plugins” set:  Size:  1  Element 0:  P31MetroAzure.dll  Click Build  Open Windows Store build in Visual Studio    Open ‘Package.appxmanifest’ manifest to add Internet capabilities.    If necessary open ‘Configuration Manager’ to target current PC hardware.      Build and run!      ‘Connect Azure Service’ first, then try adding some items.    You will see the items appear in your Azure Mobile Service ‘TodoItem’ table.Ready for the next level?Check out these links which will show you how to make a leaderboard using Azure Mobile Services &amp; Prime31:  Mobile Services &amp; Prime31 Video (leaderboard)  Mobile Services &amp; Prime31 Blog (leaderboard)  Building Unity projects for Windows 8 and WindowsPhone 8Additional Resources:  Slides for Unity and Mobile ServicesOne more thing…Now is a great time to publish Unity games for Windows!  Lifetime dev centre means no more recurring annual developer fees!  Take advantage of the Unity Offer Program for Windows apps to qualify for developer device, Unity Asset Store Voucher, Unity3d Pro License, ID@XBox priority and more!Share your Unity3d #GameDev with @deadlyfingers",
      "summary":"Azure Mobile Service is now App Service, please follow the updated tutorial for App Services for Unity3d instead.Unity game developers looking to publish their games on Windows Store might want to add global/local high-score leaderboards, record user achievements and level progress. For example the ability to save level progress is...",
      "date_published": "2014-10-22T09:46:56+01:00",
      "tags":["GameDev","Azure","Mobile Services","Unity3d","Visual Studio","Windows"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2014}
    },{
      "id": "tutorial-how-to-record-screen-of-iphone-ipad-android-and-windowsphone-device",
      "url": "https://www.deadlyfingers.net/tutorial/how-to-record-screen-of-iphone-ipad-android-and-windowsphone-device",
      "title":"How to record screen of iPhone, iPad, Android and WindowsPhone device",
      "content_text":"If you’ve developed an app you might want to make a promo video showing your app working across devices or multiple screens.Of course you can record an iOS Simulator, Android Virtual Device, or WindowsPhone emulator easy enough using a screen recording tool like Camtasia but it’s often a bit tricker to record real footage from the device hardware. Also it might be necessary to demonstrate app functionality not supported by a simulator.  Recording simulator window using Custom Region recording in Camtasia.Windows Phone 8.1 already comes with the screen projection functionality built-in. This makes Windows the easiest platform to record app interaction.How to present and record screen of WindowsPhone device using PC/MacOn PC you will need Windows 8 installed. On Mac you will need a Bootcamp partition or VMware Fusion Virtual Machine with Windows 8 installed.The WindowsPhone should have the latest 8.1 update installed.  Connect the Phone over USB.  Open Windows Phone Settings and select “Project my screen”.  Install the “Project My Screen App” for Windows 8.   Tap ‘yes’ when prompt to allow screen projection on WindowsPhone appears.  Tip: In the Windows “Project My Screen” application press ‘ F’ key to toggle fullscreen mode and ‘ B’ key to hide the phone background chrome.Unfortunately there is no way to display or record the touch gestures, but this can be dummied using Camtasia mouse effects. Simply ‘mirror’ with the mouse pointer what your other hand does on the device at the same time. Once the screen footage is recorded in Camtasia you can hide the mouse cursor by setting the Cursor Opacity to zero and add a Cursor Highlight effect to simulate the touch input.How to present and record screen of iPhone/iPad device using PC/MacTo record an iPhone or iPad you can try out the third party Reflector app. This makes your PC/Mac act as an AirPlay device allowing you to display and record the screen.  Connect PC/Mac and iPhone/iPad to the same wifi network.  Launch Reflector application.  On iOS7 or higher device, swipe up from bottom of screen to open ‘Control Center’ to select the Reflector Airplay device and enable video ‘Mirroring’.Unfortunately there is no way to display the touch gestures, but this can be dummied using Camtasia mouse effects. Simply ‘mirror’ with the mouse pointer what your other hand does on the device at the same time. Then once your Reflector footage is recorded in Camtasia you can hide the mouse cursor by setting the Cursor Opacity to zero and add a Cursor Highlight effect to simulate the touch input.How to record screen of Android device using PC/MacTo record an Android device without rooting your device requires an install of the Android SDK on your PC/Mac. Once your SDK Environment is setup you can run commands in the command prompt / Terminal:  Check Android device is connected to PC/Mac using USB connection. NB: You will have to enable ‘Developer’ mode on your device by tapping Build number seven times (found under Settings &gt; About device). Then enable USB debugging (found under new Developer options settings).adb devices  Record screen using adb shell. NB: Requires Android 4.4 KitKat (API level 19) or above.adb shellscreenrecord /sdcard/recording.mp4  Stop recording (Control+C) and exit shell.exit  Copy screen recording from device’s /sdcard onto PC/Macadb pull /sdcard/recording.mp4  Move / rename recordingmv recording.mp4 ~/Desktop/Unfortunately there is no way to record the touch gestures at the same time using this technique. What you can do is play the original screen recording and mimic the touch gestures over the top while recording using Camtasia.",
      "summary":"If you’ve developed an app you might want to make a promo video showing your app working across devices or multiple screens.Of course you can record an iOS Simulator, Android Virtual Device, or WindowsPhone emulator easy enough using a screen recording tool like Camtasia but it’s often a bit tricker...",
      "date_published": "2014-08-12T08:27:24+01:00",
      "tags":["Android","iPad","iPhone","Windows Phone"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2014}
    },{
      "id": "info-addictive-mini-games-for-surface",
      "url": "https://www.deadlyfingers.net/info/addictive-mini-games-for-surface",
      "title":"Addictive mini games for Surface",
      "content_text":"When you need a breakout from work here are 10 fun mini games to play on your Windows device. Touch Surface recommended! ;)      Reckless Racing Ultimate    Top down mini car racing game featuring offroad and race track competitions. A must have game!Get it!        Zombie HQ    Top down shooter with zombies, guns, swords and grenades = super addictive gameplay!Get it!        Rayman Jungle Run    Gorgeous animated 2D platform game on rails. Split second reaction timing is key!Get it!        Where’s my Water    Beautiful puzzle game with fluid dynamics and chemical reactions!Get it!        Spectra    Arcade space racer with retro music.Get it!        Tap Happy Sabotage!    Good family fun! A physical multiplayer game that works best on big touch screens.Get it!        Robotek    Turn by turn strategy war game with a bit of luck. Build, attack, defend or hack your opponents robots!Get it!        GunFinger    Shooting gallery arcade game with Zooooombies!Get it!        Dungeon Hunter 4    Top down adventure game. Vanquish those foul foes with your epic powers!Get it!        Top Gear: Race The Stig    Fun racing game - can you beat the Stig?Get it!  Enjoy :)",
      "summary":"When you need a breakout from work here are 10 fun mini games to play on your Windows device. Touch Surface recommended! ;) Reckless Racing Ultimate Top down mini car racing game featuring offroad and race track competitions. A must have game!Get it! Zombie HQ Top down shooter with zombies,...",
      "date_published": "2014-06-19T23:28:00+01:00",
      "tags":["App Store","Apps","Gaming","Windows"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "info",
        "year":2014}
    },{
      "id": "tutorial-send-gcm-push-notifications-using-azure-mobile-services",
      "url": "https://www.deadlyfingers.net/tutorial/send-gcm-push-notifications-using-azure-mobile-services",
      "title":"Send GCM Push Notifications using Azure Mobile Services",
      "content_text":"  Azure Mobile Services is deprecated, please migrate to Azure App Service.Tutorial requirements:  Android Studio  Microsoft Azure account — start a free Azure trial  Google developer account      First install Google Play Services package in the Android SDK Manager.          NB: If using an Android Virtual Device then ensure your Target is set to Google APIs to allow Push Notifications to work.            Create a new project in Google Developers Console.Turn on Google Cloud Messaging for Android.Create a new Public API access key.Create a new Server key.        Copy the public API keyPaste API key into Mobile Service’s Push &gt; Google Cloud Messaging settingsSave changes.        Copy google-play-services.jar (from Android SDK libs) and notifications.jar (from Azure Mobiles Services SDK for Android) into the Android project’s libs folder.    Add Push Notification permissions to the project’s AndroidManifest.xml.    &lt;permission android:name=\"**my_app_package**.permission.C2D_MESSAGE\"    android:protectionLevel=\"signature\" /&gt;&lt;uses-permission android:name=\"**my_app_package**.permission.C2D_MESSAGE\" /&gt;&lt;uses-permission android:name=\"com.google.android.c2dm.permission.RECEIVE\" /&gt;&lt;uses-permission android:name=\"android.permission.GET_ACCOUNTS\" /&gt;&lt;uses-permission android:name=\"android.permission.WAKE_LOCK\" /&gt;              NB: Replace all occurrences of **my_app_package** with the manifest’s package name attribute.        Add the receiver block just before the application closing tag.eg. … &lt;/application&gt;    &lt;receiver android:name=\"com.microsoft.windowsazure.notifications.NotificationsBroadcastReceiver\" android:permission=\"com.google.android.c2dm.permission.SEND\"&gt;    &lt;intent-filter&gt;        &lt;action android:name=\"com.google.android.c2dm.intent.RECEIVE\"&gt;&lt;/action&gt;        &lt;category android:name=\" **my_app_package**\"&gt;&lt;/category&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;        NB: Replace **my_app_package** with the manifest’s package name attribute.NB: If you get a red text error on receiver _notifications.NotificationsBroadcastReceiver* then add dependencies to the build.gradle file and sync project libraries.     dependencies {     compile 'com.android.support:support-v4:+'     compile 'com.google.code.gson:gson:2.2.2'     compile fileTree(dir: 'libs', include: ['*.jar']) }                Copy Google Project Number in overview section.Paste value into _ToDoActivity.java* as a String constant.     public static final String PROJECT_ID = \"**project-number**\";         In the _onCreate* method of ToDoActivity.java add a Notifications Manager handler.     NotificationsManager.handleNotifications(this, PROJECT_ID, MyPushNotificationsHandler.class);                Create a Channel class     public class Channel {     // Push Notifications - creates handle column in db table (dynamic schema)     @com.google.gson.annotations.SerializedName(\"handle\")     private String mHandle;     // Returns the handle     public String getHandle() { return mHandle; }     // Sets the handle     public final void setHandle(String handle) { mHandle = handle; }     // Item Id     @com.google.gson.annotations.SerializedName(\"id\")     private String mId;     //Returns the item id     public String getId() { return mId; }     //Sets the item id - @param id : id to set     public final void setId(String id) { mId = id; } }                Create MyPushNotificationsHandler class     public class MyPushNotificationsHandler extends NotificationsHandler {     @Override     public void onRegistered(Context context, String gcmRegistrationId)     {         super.onRegistered(context, gcmRegistrationId);         // + Support push notifications to users...         MobileServiceClient client = ToDoActivity.getClient();         MobileServiceTable&amp;lt;Channel&amp;gt; registrations = client.getTable(Channel.class);         // Create a new Registration         Channel channel = new Channel();         channel.setHandle(gcmRegistrationId);         // Insert the new Registration         registrations.insert(channel, new TableOperationCallback&amp;lt;Channel&amp;gt;() {             public void onCompleted(Channel entity, Exception exception, ServiceFilterResponse response) {                 if (exception != null) {                     Log.e(\"PushHandler\", exception.getMessage());                 } else {                     Log.i(\"PushHandler\", \"Registration OK\");                 }             }         });     } }         Tip: To auto import classes in Android Studio enable _Add umabiguous imports on the fly*         Create new Channel table in Azure Mobile Services.        Edit TodoItem table Script &gt; Insert    function insert(item, user, request) {    item.userId = user.userId;    //request.execute();    request.execute({        success: function() {            // Write to the response and then send the notification in the background            request.respond();            sendNotifications(item.text);        }    });    // This insert script sends a push notification (with the text of the inserted item) to all channels stored in the Channel table.    function sendNotifications(item_text) {        var channelTable = tables.getTable('Channel');        channelTable.read({            success: function(channels) {                channels.forEach(function(channel) {                    // Google Cloud Messaging                    push.gcm.send(channel.handle, item_text, {                        success: function(response) {                            console.log('Push notification sent: ', response);                        }, error: function(error) {                            console.log('Error sending push notification: ', error);                        }                    });                });            }        });    }}                  This will send a push notification upon successful insert of a Todo item.*            Edit Channel table Script &gt; Insert    function insert(item, user, request) {//request.execute();// prevents duplicated channelsvar channelTable = tables.getTable('Channel');    channelTable        .where({ handle: item.handle })        .read({ success: insertRegistrationIfNotFound });    function insertRegistrationIfNotFound(existingRegistrations) {        if (existingRegistrations.length &gt; 0) {            request.respond(200, existingRegistrations[0]);        } else {            request.execute();        }    }}                  This will prevent duplicate registrations of user and device handles.        In the app add a Todo item to trigger a Push Notification          The Push Notification will appear with the Todo item text.        That’s all there is to it! If you wanted to take it to the next level you could use this backend Mobile Service and roll it out across other platforms like Windows Store, Windows Phone, iOS, or use cross platform tools like Xamerin or Phonegap.  For latest platform support, how to connect to other identities and push notification services check out the Azure online docs.",
      "summary":"Azure Mobile Services is deprecated, please migrate to Azure App Service.Tutorial requirements: Android Studio Microsoft Azure account — start a free Azure trial Google developer account First install Google Play Services package in the Android SDK Manager. NB: If using an Android Virtual Device then ensure your Target is set...",
      "date_published": "2014-05-30T11:16:52+01:00",
      "tags":["Android","Azure","Mobile Services"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2014}
    },{
      "id": "tutorial-setup-mobile-service-table-permissions-and-authentication",
      "url": "https://www.deadlyfingers.net/tutorial/setup-mobile-service-table-permissions-and-authentication",
      "title":"Setup Mobile Service table permissions and authentication",
      "content_text":"  Azure Mobile Services is deprecated, please migrate to Azure App Service.Tutorial requirements:  Android Studio  Microsoft Azure account — start a free Azure trial  Twitter accountThis article builds on top of the previous tutorial where an Android Todo app was created with Azure Mobile Services. However most steps can be adapted for any Mobile Services Android app.  Edit TodoItem table insert permissions to Only Authenticated Users.      Create twitter app.    Copy _Mobile Service URL* from Azure Mobile Service Dashboard    Paste the Azure _Mobile Service URL* into Twitter app’s Website and Callback URL fields and save. Then in Settings tab tick the ‘Allow this application to be used Sign in with Twitter’ checkbox.        In Twitter app’s API Keys tab copy the API key &amp; API secret.    And paste them into Identity &gt; Twitter settings.        In Android Studio ToDoActivity cut the code block under the new Mobile Service client.    And paste into a new method _createTable()*.    Replace the code block with a new authenticate() method.    private void authenticate() {  mClient.login(MobileServiceAuthenticationProvider.Twitter, new UserAuthenticationCallback() {    @Override    public void onCompleted(MobileServiceUser mobileServiceUser, Exception e, ServiceFilterResponse serviceFilterResponse) {      if (e==null)      {        createAndShowDialog(String.format(\"You are signed in as %s\"), mobileServiceUser.getUserId() );      }      else      {        createAndShowDialog(e.getMessage(),\"Error\");      }    }  });}        Then build and run    Sign-in with Twitter.  You can record the userId on the server-side. Edit table Script &gt; Insert    function insert(item, user, request) {  item.userId = user.userId;  request.execute();}            Add another Todo item in the app.Refresh the ToDoItem table to see the new item with userId.      Now change Script &gt; Read so app shows only the authenticated user’s items.     function read(query, user, request) {   query.where({ userId: user.userId });   request.execute(); }        Refresh app to see changes.The list should only show ToDo items that belong to that user now.Impressive - with just a couple of lines of code the app is updated to enable user authentication and handle identity requests.Azure Mobile Services also allows you to send Push Notifications which is covered in the next tutorial.",
      "summary":"Azure Mobile Services is deprecated, please migrate to Azure App Service.Tutorial requirements: Android Studio Microsoft Azure account — start a free Azure trial Twitter accountThis article builds on top of the previous tutorial where an Android Todo app was created with Azure Mobile Services. However most steps can be adapted...",
      "date_published": "2014-05-29T11:16:17+01:00",
      "tags":["Android","Azure","Mobile Services"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2014}
    },{
      "id": "tutorial-create-mobile-service-in-azure",
      "url": "https://www.deadlyfingers.net/tutorial/create-mobile-service-in-azure",
      "title":"Create a Mobile Service in Azure",
      "content_text":"  Azure Mobile Services is deprecated, please migrate to Azure App Service.Tutorial requirements:  Android Studio  Microsoft Azure account — start a free Azure trial      Create a new Mobile Service in Azure._The wizard will take you through this process in a couple of steps. Once the mobile service is created it will only take a couple of minutes to start up before its ready to use.*        Create Todo Table.        Download Todo App.        Extract the Eclipse project archive and Import Project in Android Studio._The project may take a while to import while Gradle syncs the libraries.*        Build and run!        Add ToDo item and then browse the TodoItem Table in Azure Mobile Services.  Cool! You just built an Android app with a cloud backend in minutes :)Now you can add table permissions and setup authentication using Twitter in the next tutorial.",
      "summary":"Azure Mobile Services is deprecated, please migrate to Azure App Service.Tutorial requirements: Android Studio Microsoft Azure account — start a free Azure trial Create a new Mobile Service in Azure._The wizard will take you through this process in a couple of steps. Once the mobile service is created it will...",
      "date_published": "2014-05-28T11:11:43+01:00",
      "tags":["Android","Azure","Mobile Services"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2014}
    },{
      "id": "tutorial-create-android-app-with-cloud-backend-in-minutes",
      "url": "https://www.deadlyfingers.net/tutorial/create-android-app-with-cloud-backend-in-minutes",
      "title":"Create an Android app with a cloud backend in minutes",
      "content_text":"  Azure Mobile Services is deprecated, please migrate to Azure App Service.These days it’s probably a good idea to have cloud backend for your apps. There are a greater number of connected devices in comparison to individuals, which means your apps may be expected to work as well as sync across multiple platforms as a rule.  The number of connected devices is more than number of people since 2008. Source: CiscoThis tutorial will show you how to create a cloud backend for an Android app, but the bigger picture would be the ability to roll this out to the other platforms as well. The idea that all the connected devices of an individual user (perhaps an iPhone, iPad, WindowsPhone and Windows device) could all tap into the same shared resources and server-side business logic in the cloud. Of course managing a cloud infrastructure or server isn’t something that most app developers want to get burdened with, never mind the cost and time implications. Azure Mobile Services takes care of all that, enabling developers to focus on developing the app – making the best possible user experience.I have arranged this tutorial as a three part series. Each part features a 10-15 minute video screencast to allow inclusion of additional titbits that I hope will prove useful. Please note these tutorials are recorded using Android Studio on a Mac, so bear in mind that some steps may differ slightly if you are using Android Studio for Windows or Eclipse.How to create an Android app using Azure Mobile Services tutorial parts:  Create a Mobile Service in Azure  Setup Mobile Service table permissions and authentication  Send GCM Push Notifications using Azure Mobile Services:memo: Azure Mobile Services for Android cheatsheet",
      "summary":"Azure Mobile Services is deprecated, please migrate to Azure App Service.These days it’s probably a good idea to have cloud backend for your apps. There are a greater number of connected devices in comparison to individuals, which means your apps may be expected to work as well as sync across...",
      "date_published": "2014-05-27T08:39:50+01:00",
      "tags":["Android","Azure","Mobile Services"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2014}
    },{
      "id": "tutorial-enabling-additional-wordpress-azure-websites-to-reuse-existing-mysql-database",
      "url": "https://www.deadlyfingers.net/tutorial/enabling-additional-wordpress-azure-websites-to-reuse-existing-mysql-database",
      "title":"Enabling additional Wordpress Azure websites to reuse existing MySQL database",
      "content_text":"  This tutorial has been deprecated. Please check the wiki for setting up Wordpress with the new Azure App Service.It’s super simple to create your first Wordpress blog using Microsoft Azure Websites Gallery. Getting this all up and running is extremely fast. I’ve uploaded a short video and blog post showing how to setup up a Wordpress site in Azure in only a couple of minutes.But what if you want to create a second Wordpress Azure website while reusing your existing MySQL database from the first one?Initially when I load up the ‘*.azure-websites.net’ URL I just get a blank page (which is PHP’s quiet way of letting you know something needs fixed). When you reuse the existing MySQL database then you going to need to tweak one setting in the Wordpress configuration file (wp-config.php). To modify this config file you will need to grab your FTP settings in your Azure website dashboard.Download the publish profile to get your FTP username and password. Open this file in an XML text editor to locate the ‘userName’ and ‘userPass’ values which are located just after the ‘ftpPassiveMode’ attribute.Once you FTP in, navigate to site/wwwroot/ and edit the wp-config.php file (you may wish to download a backup first). Then change the ‘table_prefix’ value (line no. 62) from:$table_prefix = 'wp_';to something like:$table_prefix = 'wp2_';You should now be able to navigate to your website URL ‘*.azure-websites.net/wp-admin/’ to complete the Wordpress setup.Also, if you want to see what this looks like in your database just open up a MySQL client to check the new Wordpress tables added using the connection settings available in your Azure Websites dashboard.",
      "summary":"This tutorial has been deprecated. Please check the wiki for setting up Wordpress with the new Azure App Service.It’s super simple to create your first Wordpress blog using Microsoft Azure Websites Gallery. Getting this all up and running is extremely fast. I’ve uploaded a short video and blog post showing...",
      "date_published": "2014-04-25T11:55:04+01:00",
      "tags":["Blog","Azure","Website","Wordpress"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2014}
    },{
      "id": "tutorial-setting-up-a-wordpress-website-with-azure",
      "url": "https://www.deadlyfingers.net/tutorial/setting-up-a-wordpress-website-with-azure",
      "title":"Setting up a Wordpress website with Azure",
      "content_text":"  This tutorial has been deprecated. Please check the wiki for setting up Wordpress with the new Azure App Service.  Start an Azure trial or sign-in into your Microsoft Azure management portal.  Select WEB SITES and choose NEW &gt; WEB SITE &gt; FROM GALLERY    Select BLOGS &gt; WordPress    Enter unique site URL at *.azurewebsites.net (you will be able to add your own domain name later). Choose MySQL database option and preferred region. Deployment Settings are optional and can be skipped.    Setup your Wordpress site by visiting your Azure Website’s URL http://*.azurewebsites.net in your browser.  To setup custom domain name URL you will have to upscale from FREE to STANDARD. In your website menu select SCALE &gt; STANDARD.    Select CONFIGURE &gt; domain names &gt; manage domains    Enter your custom URL. You will also need to make a note of the CNAME record awverify.www.*.azurewebsites.net to verify ownership and the IP ADDRESS provided to update your DNS A-Record.    Go to your domain registrar control panel to modify the domain’s DNS Records.Add the CNAME record awverify.www.*.azurewebsites.net  (Note: some registrars require Canonical names to have an extra ‘.’ at the end)    You will also need to remove any existing A Records and replace with a new A Record pointing to your Azure Website’s IP Address.      Once your DNS changes are in sync (usually 1-2 hours), you can update the domain settings in your Azure Website’s Wordpress control panel to match your domain.      Finally, I would activate Settings &gt; Permalinks using one of the presets or a custom structure. This enables a number of benefits including SEO friendly URLs so your keywords can appear in the URL address bar. Also advanced users can navigate using your URL address. Tip: for huge blogs it maybe advisable to start with a number (like %year% or %post_id%) for speed.    Just one more thing… It’s probably a good idea to backup your Wordpress website so you can rollback if a Wordpress update ever goes wrong. Azure BACKUPS is a new feature which automatically backs up to a STORAGE data service. When creating a new Storage component I would select a different region and set replication to ‘Locally Redundant’ which is the most cost effective option.  Thanks @plankytronixx for the Azure Websites bootcamp!For custom domains checkout out the post on advanced DNS settings for Azure Websites.",
      "summary":"This tutorial has been deprecated. Please check the wiki for setting up Wordpress with the new Azure App Service. Start an Azure trial or sign-in into your Microsoft Azure management portal. Select WEB SITES and choose NEW &gt; WEB SITE &gt; FROM GALLERY Select BLOGS &gt; WordPress Enter unique site URL at *.azurewebsites.net (you...",
      "date_published": "2014-04-02T11:50:05+01:00",
      "tags":["Azure","Blog","Wordpress","Website"],
      "author": {
        "name":"David Douglas"},
      "_data": {
        "categories": "tutorial",
        "year":2014}
    }]
}